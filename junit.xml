<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="774" failures="0" errors="0" time="122.34">
  <testsuite name="Container: &lt;Header /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:04" time="11.467" tests="6">
    <testcase classname="Container: &lt;Header /&gt; should render Header Desktop container" name="Container: &lt;Header /&gt; should render Header Desktop container" time="2.808">
    </testcase>
    <testcase classname="Container: &lt;Header /&gt; should render Header Mobile container" name="Container: &lt;Header /&gt; should render Header Mobile container" time="0.169">
    </testcase>
    <testcase classname="Container: &lt;Header /&gt; should render component Cycle in Header" name="Container: &lt;Header /&gt; should render component Cycle in Header" time="0.304">
    </testcase>
    <testcase classname="Container: &lt;Header /&gt; check the collapse of menu item" name="Container: &lt;Header /&gt; check the collapse of menu item" time="0.222">
    </testcase>
    <testcase classname="Container: &lt;Header /&gt; should after click in menu and show the dropdown" name="Container: &lt;Header /&gt; should after click in menu and show the dropdown" time="0.084">
    </testcase>
    <testcase classname="Container: &lt;Header /&gt; should click in button logout" name="Container: &lt;Header /&gt; should click in button logout" time="0.255">
    </testcase>
  </testsuite>
  <testsuite name="src/core/middlewares/effects" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:04" time="11.642" tests="15">
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;cartFetchRequest&quot; should fetch the cart and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;cartFetchRequest&quot; should fetch the cart and update the redux store in the request success" time="0.272">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;cartFetchRequest&quot; should fetch the cart and update the redux store when error any" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;cartFetchRequest&quot; should fetch the cart and update the redux store when error any" time="0.26">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;cartFetchRequest&quot; should show a notification when to get a cart error" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;cartFetchRequest&quot; should show a notification when to get a cart error" time="0.259">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;itemAddFetchRequest&quot; should add item the cart and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;itemAddFetchRequest&quot; should add item the cart and update the redux store in the request success" time="0.257">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;itemDeleteFetchRequest&quot; should delete item the cart and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;itemDeleteFetchRequest&quot; should delete item the cart and update the redux store in the request success" time="0.257">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;itemUpdateFetchRequest&quot; should update item the cart and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;itemUpdateFetchRequest&quot; should update item the cart and update the redux store in the request success" time="0.258">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;catalogFetchRequest&quot; should fetch the catalog and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;catalogFetchRequest&quot; should fetch the catalog and update the redux store in the request success" time="0.256">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;searchFetchRequest&quot; should fetch the search and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;searchFetchRequest&quot; should fetch the search and update the redux store in the request success" time="0.258">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;showcasesFetchRequest&quot; should fetch the showcases and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;showcasesFetchRequest&quot; should fetch the showcases and update the redux store in the request success" time="0.258">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;creditFetchRequest&quot; should fetch the user credit and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;creditFetchRequest&quot; should fetch the user credit and update the redux store in the request success" time="0.277">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;cyclesFetchRequest&quot; should fetch cycles and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;cyclesFetchRequest&quot; should fetch cycles and update the redux store in the request success" time="0.257">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;orderFetchRequest&quot; should fetch the order detail and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;orderFetchRequest&quot; should fetch the order detail and update the redux store in the request success" time="0.255">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;createOrderFetchRequest&quot; should create order and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;createOrderFetchRequest&quot; should create order and update the redux store in the request success" time="0.259">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;paymentMethodsFetch&quot; should send payment methods and update the redux store in the request success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;paymentMethodsFetch&quot; should send payment methods and update the redux store in the request success" time="0.262">
    </testcase>
    <testcase classname="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;paymentMethodsFetch&quot; should finalize the request after an error and the status of the order should success" name="src/core/middlewares/effects Saga&apos;s integration rootEffects() BFF Action &quot;paymentMethodsFetch&quot; should finalize the request after an error and the status of the order should success" time="0.282">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;ProductCard /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:16" time="5.473" tests="5">
    <testcase classname="Component: &lt;ProductCard /&gt; should render a product card properly" name="Component: &lt;ProductCard /&gt; should render a product card properly" time="0.114">
    </testcase>
    <testcase classname="Component: &lt;ProductCard /&gt; should render Product Card Skeleton" name="Component: &lt;ProductCard /&gt; should render Product Card Skeleton" time="0.057">
    </testcase>
    <testcase classname="Component: &lt;ProductCard /&gt; should click on add product properly" name="Component: &lt;ProductCard /&gt; should click on add product properly" time="0.092">
    </testcase>
    <testcase classname="Component: &lt;ProductCard /&gt; should change quantity properly" name="Component: &lt;ProductCard /&gt; should change quantity properly" time="1.694">
    </testcase>
    <testcase classname="Component: &lt;ProductCard /&gt; should show Unavailable and send Buy Intention" name="Component: &lt;ProductCard /&gt; should show Unavailable and send Buy Intention" time="0.065">
    </testcase>
  </testsuite>
  <testsuite name="Container: &lt;ComboOptions /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:16" time="6.479" tests="7">
    <testcase classname="Container: &lt;ComboOptions /&gt; should render skeleton on ComboOptions container" name="Container: &lt;ComboOptions /&gt; should render skeleton on ComboOptions container" time="0.274">
    </testcase>
    <testcase classname="Container: &lt;ComboOptions /&gt; should render combo data on ComboOptions container" name="Container: &lt;ComboOptions /&gt; should render combo data on ComboOptions container" time="0.533">
    </testcase>
    <testcase classname="Container: &lt;ComboOptions /&gt; should add combo on cart" name="Container: &lt;ComboOptions /&gt; should add combo on cart" time="0.262">
    </testcase>
    <testcase classname="Container: &lt;ComboOptions /&gt; should not add combo on cart" name="Container: &lt;ComboOptions /&gt; should not add combo on cart" time="0.06">
    </testcase>
    <testcase classname="Container: &lt;ComboOptions /&gt; should update combo in cart" name="Container: &lt;ComboOptions /&gt; should update combo in cart" time="0.697">
    </testcase>
    <testcase classname="Container: &lt;ComboOptions /&gt; should update combo item in cart" name="Container: &lt;ComboOptions /&gt; should update combo item in cart" time="0.359">
    </testcase>
    <testcase classname="Container: &lt;ComboOptions /&gt; should add combo after selecting shipping model" name="Container: &lt;ComboOptions /&gt; should add combo after selecting shipping model" time="0.05">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/request" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:04" time="19.791" tests="9">
    <testcase classname="core/utilities/request request() should execute a GET successfully" name="core/utilities/request request() should execute a GET successfully" time="0.022">
    </testcase>
    <testcase classname="core/utilities/request request() should execute a POST successfully with encoded body" name="core/utilities/request request() should execute a POST successfully with encoded body" time="0.008">
    </testcase>
    <testcase classname="core/utilities/request request() should execute a POST successfully with parsed JSON body" name="core/utilities/request request() should execute a POST successfully with parsed JSON body" time="0.005">
    </testcase>
    <testcase classname="core/utilities/request request() should accept GET and receive 206 and throw error" name="core/utilities/request request() should accept GET and receive 206 and throw error" time="12.031">
    </testcase>
    <testcase classname="core/utilities/request request() should reject for a bad request" name="core/utilities/request request() should reject for a bad request" time="0.007">
    </testcase>
    <testcase classname="core/utilities/request request() should reject for a server error" name="core/utilities/request request() should reject for a server error" time="0.004">
    </testcase>
    <testcase classname="core/utilities/request request() should fail without param" name="core/utilities/request request() should fail without param" time="0.01">
    </testcase>
    <testcase classname="core/utilities/request request() should fail without endpoint" name="core/utilities/request request() should fail without endpoint" time="0.006">
    </testcase>
    <testcase classname="core/utilities/request request() should fail without a valid content type" name="core/utilities/request request() should fail without a valid content type" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Widgets: Gifts" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:04" time="20.059" tests="7">
    <testcase classname="Widgets: Gifts should render Gifts container" name="Widgets: Gifts should render Gifts container" time="0.672">
    </testcase>
    <testcase classname="Widgets: Gifts should render page header" name="Widgets: Gifts should render page header" time="0.239">
    </testcase>
    <testcase classname="Widgets: Gifts should render Gifts Header" name="Widgets: Gifts should render Gifts Header" time="0.202">
    </testcase>
    <testcase classname="Widgets: Gifts should render Gifts Content" name="Widgets: Gifts should render Gifts Content" time="1.161">
    </testcase>
    <testcase classname="Widgets: Gifts should add one gift from the first promotion" name="Widgets: Gifts should add one gift from the first promotion" time="0.683">
    </testcase>
    <testcase classname="Widgets: Gifts should add two gifts from the first promotion and remove one" name="Widgets: Gifts should add two gifts from the first promotion and remove one" time="2.839">
    </testcase>
    <testcase classname="Widgets: Gifts should add first gift from the first promotion and input the max value" name="Widgets: Gifts should add first gift from the first promotion and input the max value" time="4.06">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;ProductCompact /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:22" time="5.446" tests="5">
    <testcase classname="Component: &lt;ProductCompact /&gt; should render properly" name="Component: &lt;ProductCompact /&gt; should render properly" time="0.086">
    </testcase>
    <testcase classname="Component: &lt;ProductCompact /&gt; should render Product Compact Skeleton properly" name="Component: &lt;ProductCompact /&gt; should render Product Compact Skeleton properly" time="0.071">
    </testcase>
    <testcase classname="Component: &lt;ProductCompact /&gt; should click and add product" name="Component: &lt;ProductCompact /&gt; should click and add product" time="0.083">
    </testcase>
    <testcase classname="Component: &lt;ProductCompact /&gt; should show Unavailable without stock" name="Component: &lt;ProductCompact /&gt; should show Unavailable without stock" time="0.036">
    </testcase>
    <testcase classname="Component: &lt;ProductCompact /&gt; should show a product with quantity selector" name="Component: &lt;ProductCompact /&gt; should show a product with quantity selector" time="1.656">
    </testcase>
  </testsuite>
  <testsuite name="Page: PageCheckout" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:23" time="5.366" tests="1">
    <testcase classname="Page: PageCheckout should render script clear sale" name="Page: PageCheckout should render script clear sale" time="0.315">
    </testcase>
  </testsuite>
  <testsuite name="Checkout Container" errors="0" failures="0" skipped="2" timestamp="2024-05-27T22:25:25" time="3.889" tests="8">
    <testcase classname="Checkout Container should render checkout container without payment methods" name="Checkout Container should render checkout container without payment methods" time="0.313">
    </testcase>
    <testcase classname="Checkout Container should render checkout container with payment methods" name="Checkout Container should render checkout container with payment methods" time="0.103">
    </testcase>
    <testcase classname="Checkout Container should render checkout payment methods" name="Checkout Container should render checkout payment methods" time="0.058">
    </testcase>
    <testcase classname="Checkout Container should render checkout and redirect to home in case of cart can submit not true" name="Checkout Container should render checkout and redirect to home in case of cart can submit not true" time="0.036">
    </testcase>
    <testcase classname="Checkout Container should give error 400 while load cart" name="Checkout Container should give error 400 while load cart" time="0.064">
    </testcase>
    <testcase classname="Checkout Container should give error 500 while load cart" name="Checkout Container should give error 500 while load cart" time="0.063">
    </testcase>
    <testcase classname="Retry order should show a message concluding order" name="Retry order should show a message concluding order" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Retry order should show a message concluding order with central payment choose" name="Retry order should show a message concluding order with central payment choose" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Pages Mapper" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:24" time="6.1" tests="9">
    <testcase classname="Pages Mapper should render PageCheckout" name="Pages Mapper should render PageCheckout" time="0.713">
    </testcase>
    <testcase classname="Pages Mapper should render PageOrderSuccess" name="Pages Mapper should render PageOrderSuccess" time="0.046">
    </testcase>
    <testcase classname="Pages Mapper should render Loading" name="Pages Mapper should render Loading" time="0.038">
    </testcase>
    <testcase classname="Pages Mapper should render PageBuilder" name="Pages Mapper should render PageBuilder" time="0.058">
    </testcase>
    <testcase classname="Pages Mapper should render Error" name="Pages Mapper should render Error" time="0.018">
    </testcase>
    <testcase classname="Pages Mapper should render MfSelfService" name="Pages Mapper should render MfSelfService" time="0.014">
    </testcase>
    <testcase classname="Pages Mapper should render Logout" name="Pages Mapper should render Logout" time="0.019">
    </testcase>
    <testcase classname="Pages Mapper should render PageGifts" name="Pages Mapper should render PageGifts" time="0.709">
    </testcase>
    <testcase classname="Pages Mapper should render PageProductsByTag" name="Pages Mapper should render PageProductsByTag" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="Component: ClearsaleScript" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:28" time="3.693" tests="1">
    <testcase classname="Component: ClearsaleScript should render ClearsaleScript" name="Component: ClearsaleScript should render ClearsaleScript" time="0.068">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;QuantitySelector /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:29" time="4.514" tests="11">
    <testcase classname="Component: &lt;QuantitySelector /&gt; should render &lt;QuantitySelector /&gt; properly" name="Component: &lt;QuantitySelector /&gt; should render &lt;QuantitySelector /&gt; properly" time="0.133">
    </testcase>
    <testcase classname="Component: &lt;QuantitySelector /&gt; should trigger the callback function with debounce" name="Component: &lt;QuantitySelector /&gt; should trigger the callback function with debounce" time="1.61">
    </testcase>
    <testcase classname="Component: &lt;QuantitySelector /&gt; Click interactions should increment value when user clicks on increment button" name="Component: &lt;QuantitySelector /&gt; Click interactions should increment value when user clicks on increment button" time="0.033">
    </testcase>
    <testcase classname="Component: &lt;QuantitySelector /&gt; Click interactions should decrement value when user clicks on decrement button" name="Component: &lt;QuantitySelector /&gt; Click interactions should decrement value when user clicks on decrement button" time="0.072">
    </testcase>
    <testcase classname="Component: &lt;QuantitySelector /&gt; Click interactions should not allow to subtract below the minimum value when user clicks on decrement button" name="Component: &lt;QuantitySelector /&gt; Click interactions should not allow to subtract below the minimum value when user clicks on decrement button" time="0.031">
    </testcase>
    <testcase classname="Component: &lt;QuantitySelector /&gt; Click interactions should not allow to increment above the maximum value when user clicks on increment button" name="Component: &lt;QuantitySelector /&gt; Click interactions should not allow to increment above the maximum value when user clicks on increment button" time="0.023">
    </testcase>
    <testcase classname="Component: &lt;QuantitySelector /&gt; Input interactions should allow user to input a value" name="Component: &lt;QuantitySelector /&gt; Input interactions should allow user to input a value" time="0.059">
    </testcase>
    <testcase classname="Component: &lt;QuantitySelector /&gt; Input interactions should not allow user to input a value bigger than maximum value" name="Component: &lt;QuantitySelector /&gt; Input interactions should not allow user to input a value bigger than maximum value" time="0.061">
    </testcase>
    <testcase classname="Component: &lt;QuantitySelector /&gt; Input interactions should not allow user to input a value lesser than minimum value" name="Component: &lt;QuantitySelector /&gt; Input interactions should not allow user to input a value lesser than minimum value" time="0.056">
    </testcase>
    <testcase classname="Component: &lt;QuantitySelector /&gt; Input interactions should delete the item when the minus button is pressed" name="Component: &lt;QuantitySelector /&gt; Input interactions should delete the item when the minus button is pressed" time="0.017">
    </testcase>
    <testcase classname="Component: &lt;QuantitySelector /&gt; Input interactions should not increase the value when the isCombo props is true" name="Component: &lt;QuantitySelector /&gt; Input interactions should not increase the value when the isCombo props is true" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="Page: Loading" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:29" time="4.561" tests="16">
    <testcase classname="Page: Loading should render Loading page" name="Page: Loading should render Loading page" time="0.091">
    </testcase>
    <testcase classname="Page: Loading should render element loader in page" name="Page: Loading should render element loader in page" time="0.047">
    </testcase>
    <testcase classname="Page: Loading User can choose cycle and and user have not choose cycle yet should render a modal when user can choose cycle" name="Page: Loading User can choose cycle and and user have not choose cycle yet should render a modal when user can choose cycle" time="0.287">
    </testcase>
    <testcase classname="Page: Loading User can choose cycle and and user have not choose cycle yet User choose extended cycle should a confirmation message after user click in stay in extended cycle" name="Page: Loading User can choose cycle and and user have not choose cycle yet User choose extended cycle should a confirmation message after user click in stay in extended cycle" time="0.082">
    </testcase>
    <testcase classname="Page: Loading User can choose cycle and and user have not choose cycle yet User choose extended cycle should hide extended captation modal after user click in confirmation button" name="Page: Loading User can choose cycle and and user have not choose cycle yet User choose extended cycle should hide extended captation modal after user click in confirmation button" time="0.26">
    </testcase>
    <testcase classname="Page: Loading User can choose cycle and and user have not choose cycle yet User can choose cycle and choose new cycle should a confirmation message after user click in go to new cycle" name="Page: Loading User can choose cycle and and user have not choose cycle yet User can choose cycle and choose new cycle should a confirmation message after user click in go to new cycle" time="0.083">
    </testcase>
    <testcase classname="Page: Loading It has option to choose cycle, but user already have choose extended cycle should not render extended captation modal when user has option the choose cycle but he user already have choose extended cycle" name="Page: Loading It has option to choose cycle, but user already have choose extended cycle should not render extended captation modal when user has option the choose cycle but he user already have choose extended cycle" time="0.038">
    </testcase>
    <testcase classname="Page: Loading user only can buy in ER should render can buy only in extended cycle modal" name="Page: Loading user only can buy in ER should render can buy only in extended cycle modal" time="0.047">
    </testcase>
    <testcase classname="Page: Loading User is in extended captation but now user only can buy in ER should render can buy only in extended cycle modal" name="Page: Loading User is in extended captation but now user only can buy in ER should render can buy only in extended cycle modal" time="0.041">
    </testcase>
    <testcase classname="Page: Loading User does not have option to choose cycle should not render extended captation modal" name="Page: Loading User does not have option to choose cycle should not render extended captation modal" time="0.044">
    </testcase>
    <testcase classname="Page: Loading Show loading when cycles.status = running should render a loader when cycles.status = running" name="Page: Loading Show loading when cycles.status = running should render a loader when cycles.status = running" time="0.014">
    </testcase>
    <testcase classname="Page: Loading User is IR should render IR modal when user is IR" name="Page: Loading User is IR should render IR modal when user is IR" time="0.059">
    </testcase>
    <testcase classname="Page: Loading User is IR should not render IR modal when user is not IR" name="Page: Loading User is IR should not render IR modal when user is not IR" time="0.01">
    </testcase>
    <testcase classname="Page: Loading User is IR should render IR modal when user is IR and has extended captation" name="Page: Loading User is IR should render IR modal when user is IR and has extended captation" time="0.037">
    </testcase>
    <testcase classname="Page: Loading User is IR should render IR modal when user is IR and is not start enabled" name="Page: Loading User is IR should render IR modal when user is IR and is not start enabled" time="0.037">
    </testcase>
    <testcase classname="Page: Loading User is IR should not render IR modal when user is IR and is start enabled" name="Page: Loading User is IR should not render IR modal when user is IR and is start enabled" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Container - Application Wrapper" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:32" time="3.902" tests="1">
    <testcase classname="Container - Application Wrapper should render ApplicationWrapper" name="Container - Application Wrapper should render ApplicationWrapper" time="0.351">
    </testcase>
  </testsuite>
  <testsuite name="Container: &lt;Cart /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:31" time="5.067" tests="5">
    <testcase classname="Container: &lt;Cart /&gt; should render empty cart container" name="Container: &lt;Cart /&gt; should render empty cart container" time="0.149">
    </testcase>
    <testcase classname="Container: &lt;Cart /&gt; should render cart container with items" name="Container: &lt;Cart /&gt; should render cart container with items" time="0.327">
    </testcase>
    <testcase classname="Container: &lt;Cart /&gt; should try to delete first item and cancel" name="Container: &lt;Cart /&gt; should try to delete first item and cancel" time="0.8">
    </testcase>
    <testcase classname="Container: &lt;Cart /&gt; should try to delete first item" name="Container: &lt;Cart /&gt; should try to delete first item" time="0.36">
    </testcase>
    <testcase classname="Container: &lt;Cart /&gt; should redirect to checkout" name="Container: &lt;Cart /&gt; should redirect to checkout" time="0.091">
    </testcase>
  </testsuite>
  <testsuite name="ProductsShowcases" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:33" time="3.887" tests="1">
    <testcase classname="ProductsShowcases should render ProductsShowcases" name="ProductsShowcases should render ProductsShowcases" time="0.169">
    </testcase>
  </testsuite>
  <testsuite name="Widgets: &lt;Summary /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:34" time="4.29" tests="6">
    <testcase classname="Widgets: &lt;Summary /&gt; should render &lt;SummaryLoader /&gt; properly" name="Widgets: &lt;Summary /&gt; should render &lt;SummaryLoader /&gt; properly" time="0.347">
    </testcase>
    <testcase classname="Widgets: &lt;Summary /&gt; should render &lt;CheckoutSkeleton /&gt; properly" name="Widgets: &lt;Summary /&gt; should render &lt;CheckoutSkeleton /&gt; properly" time="0.081">
    </testcase>
    <testcase classname="Widgets: &lt;Summary /&gt; should render &lt;Summary /&gt; properly" name="Widgets: &lt;Summary /&gt; should render &lt;Summary /&gt; properly" time="0.074">
    </testcase>
    <testcase classname="Widgets: &lt;Summary /&gt; should render &lt;Summary /&gt; container with 2 itens in points program" name="Widgets: &lt;Summary /&gt; should render &lt;Summary /&gt; container with 2 itens in points program" time="0.04">
    </testcase>
    <testcase classname="Widgets: &lt;Summary /&gt; should not render points program in &lt;Summary /&gt;" name="Widgets: &lt;Summary /&gt; should not render points program in &lt;Summary /&gt;" time="0.043">
    </testcase>
    <testcase classname="Widgets: &lt;Summary /&gt; should not render points program in &lt;Summary / without available items" name="Widgets: &lt;Summary /&gt; should not render points program in &lt;Summary / without available items" time="0.043">
    </testcase>
  </testsuite>
  <testsuite name="component: &lt;BuyOnlyER /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:36" time="3.514" tests="5">
    <testcase classname="component: &lt;BuyOnlyER /&gt; should render a message that user only can buy in ER when cycles.status === &quot;&quot;" name="component: &lt;BuyOnlyER /&gt; should render a message that user only can buy in ER when cycles.status === &quot;&quot;" time="0.127">
    </testcase>
    <testcase classname="component: &lt;BuyOnlyER /&gt; should render a feedback message that user only can buy in ER when cycles.status !== &quot;&quot;" name="component: &lt;BuyOnlyER /&gt; should render a feedback message that user only can buy in ER when cycles.status !== &quot;&quot;" time="0.043">
    </testcase>
    <testcase classname="component: &lt;BuyOnlyER /&gt; should render a loader when cycles.status === running" name="component: &lt;BuyOnlyER /&gt; should render a loader when cycles.status === running" time="0.02">
    </testcase>
    <testcase classname="component: &lt;BuyOnlyER /&gt; should render mobile style when isMobile = true" name="component: &lt;BuyOnlyER /&gt; should render mobile style when isMobile = true" time="0.036">
    </testcase>
    <testcase classname="component: &lt;BuyOnlyER /&gt; should render desktop style when isMobile = false" name="component: &lt;BuyOnlyER /&gt; should render desktop style when isMobile = false" time="0.035">
    </testcase>
  </testsuite>
  <testsuite name="Page: PageProductsByTag" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:36" time="4.003" tests="3">
    <testcase classname="Page: PageProductsByTag should render PageProductsByTag page" name="Page: PageProductsByTag should render PageProductsByTag page" time="0.228">
    </testcase>
    <testcase classname="Page: PageProductsByTag should render PageProductsByTag page with the message of product not found" name="Page: PageProductsByTag should render PageProductsByTag page with the message of product not found" time="0.024">
    </testcase>
    <testcase classname="Page: PageProductsByTag should render PageProductsByTag page with a loading message" name="Page: PageProductsByTag should render PageProductsByTag page with a loading message" time="0.051">
    </testcase>
  </testsuite>
  <testsuite name="Container: &lt;ShippingModelProductNotFound /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:38" time="3.825" tests="1">
    <testcase classname="Container: &lt;ShippingModelProductNotFound /&gt; should render container with combo code" name="Container: &lt;ShippingModelProductNotFound /&gt; should render container with combo code" time="0.17">
    </testcase>
  </testsuite>
  <testsuite name="Page: PageCategory" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:39" time="3.68" tests="1">
    <testcase classname="Page: PageCategory should render PageProductsByTag page" name="Page: PageCategory should render PageProductsByTag page" time="0.215">
    </testcase>
  </testsuite>
  <testsuite name="component: &lt;FeedbackMessage /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:40" time="2.908" tests="6">
    <testcase classname="component: &lt;FeedbackMessage /&gt; should a success message when cycles.status === success" name="component: &lt;FeedbackMessage /&gt; should a success message when cycles.status === success" time="0.122">
    </testcase>
    <testcase classname="component: &lt;FeedbackMessage /&gt; should a success message when cycles.status === error" name="component: &lt;FeedbackMessage /&gt; should a success message when cycles.status === error" time="0.048">
    </testcase>
    <testcase classname="component: &lt;FeedbackMessage /&gt; should hide modal when user click in Entendi button in success message" name="component: &lt;FeedbackMessage /&gt; should hide modal when user click in Entendi button in success message" time="0.092">
    </testcase>
    <testcase classname="component: &lt;FeedbackMessage /&gt; should hide modal when user click in Entendi button in error message" name="component: &lt;FeedbackMessage /&gt; should hide modal when user click in Entendi button in error message" time="0.071">
    </testcase>
    <testcase classname="component: &lt;FeedbackMessage /&gt; should render mobile style when isMobile = true" name="component: &lt;FeedbackMessage /&gt; should render mobile style when isMobile = true" time="0.039">
    </testcase>
    <testcase classname="component: &lt;FeedbackMessage /&gt; should render desktop style when isMobile = true" name="component: &lt;FeedbackMessage /&gt; should render desktop style when isMobile = true" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="HeaderSearchResult" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:40" time="3.413" tests="3">
    <testcase classname="HeaderSearchResult should render HeaderSearchResult" name="HeaderSearchResult should render HeaderSearchResult" time="0.129">
    </testcase>
    <testcase classname="HeaderSearchResult should render a list of products when found products" name="HeaderSearchResult should render a list of products when found products" time="0.025">
    </testcase>
    <testcase classname="HeaderSearchResult should render a not found message when not found any products" name="HeaderSearchResult should render a not found message when not found any products" time="0.038">
    </testcase>
  </testsuite>
  <testsuite name="Slider component" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:42" time="3.168" tests="2">
    <testcase classname="Slider component should render Slider collection" name="Slider component should render Slider collection" time="0.116">
    </testcase>
    <testcase classname="Slider component should render Slider with filter content" name="Slider component should render Slider with filter content" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Cart /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:43" time="3.421" tests="6">
    <testcase classname="Component: &lt;Cart /&gt; Within elements should render cart and its children properly" name="Component: &lt;Cart /&gt; Within elements should render cart and its children properly" time="0.319">
    </testcase>
    <testcase classname="Component: &lt;Cart /&gt; Within elements should render cart with quantity more than one" name="Component: &lt;Cart /&gt; Within elements should render cart with quantity more than one" time="0.04">
    </testcase>
    <testcase classname="Component: &lt;Cart /&gt; Within elements should render &lt;DeleteItem /&gt; properly" name="Component: &lt;Cart /&gt; Within elements should render &lt;DeleteItem /&gt; properly" time="0.04">
    </testcase>
    <testcase classname="Component: &lt;Cart /&gt; Within elements should render &lt;EmptyCart /&gt; properly" name="Component: &lt;Cart /&gt; Within elements should render &lt;EmptyCart /&gt; properly" time="0.026">
    </testcase>
    <testcase classname="Component: &lt;Cart /&gt; should trigger delete callback when user clicks on delete button" name="Component: &lt;Cart /&gt; should trigger delete callback when user clicks on delete button" time="0.092">
    </testcase>
    <testcase classname="Component: &lt;Cart /&gt; should notify user that order has been reached the minimun value" name="Component: &lt;Cart /&gt; should notify user that order has been reached the minimun value" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="Container: &lt;GuideCycleEud /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:43" time="3.215" tests="2">
    <testcase classname="Container: &lt;GuideCycleEud /&gt; should render Eudora catalog" name="Container: &lt;GuideCycleEud /&gt; should render Eudora catalog" time="0.064">
    </testcase>
    <testcase classname="Container: &lt;GuideCycleBot /&gt; should render Boticario catalog" name="Container: &lt;GuideCycleBot /&gt; should render Boticario catalog" time="0.141">
    </testcase>
  </testsuite>
  <testsuite name="Container: &lt;ShippingModel /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:44" time="3.667" tests="7">
    <testcase classname="Container: &lt;ShippingModel /&gt; should render ShippingModel with not available deliveries container" name="Container: &lt;ShippingModel /&gt; should render ShippingModel with not available deliveries container" time="0.086">
    </testcase>
    <testcase classname="Container: &lt;ShippingModel /&gt; should render itens on ShippingModel with available deliveries container" name="Container: &lt;ShippingModel /&gt; should render itens on ShippingModel with available deliveries container" time="0.118">
    </testcase>
    <testcase classname="Container: &lt;ShippingModel /&gt; should select default shipping model" name="Container: &lt;ShippingModel /&gt; should select default shipping model" time="0.134">
    </testcase>
    <testcase classname="Container: &lt;ShippingModel /&gt; should select default with new shipping model" name="Container: &lt;ShippingModel /&gt; should select default with new shipping model" time="0.02">
    </testcase>
    <testcase classname="Container: &lt;ShippingModel /&gt; should select default with new shipping model and reload showcases" name="Container: &lt;ShippingModel /&gt; should select default with new shipping model and reload showcases" time="0.012">
    </testcase>
    <testcase classname="Container: &lt;ShippingModel /&gt; should select default with new shipping model and reload selected showcase" name="Container: &lt;ShippingModel /&gt; should select default with new shipping model and reload selected showcase" time="0.01">
    </testcase>
    <testcase classname="Container: &lt;ShippingModel /&gt; should select default with new shipping model and reload selected product list" name="Container: &lt;ShippingModel /&gt; should select default with new shipping model and reload selected product list" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Summary /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:45" time="3.033" tests="1">
    <testcase classname="Component: &lt;Summary /&gt; should render summary component properly" name="Component: &lt;Summary /&gt; should render summary component properly" time="0.068">
    </testcase>
  </testsuite>
  <testsuite name="Container: &lt;PickupStoreOptions /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:47" time="2.678" tests="2">
    <testcase classname="Container: &lt;PickupStoreOptions /&gt; should render PickupStoreOptions" name="Container: &lt;PickupStoreOptions /&gt; should render PickupStoreOptions" time="0.016">
    </testcase>
    <testcase classname="Container: &lt;PickupStoreOptions /&gt; should selected a pickup store option" name="Container: &lt;PickupStoreOptions /&gt; should selected a pickup store option" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;CycleControls /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:47" time="2.694" tests="3">
    <testcase classname="Component: &lt;CycleControls /&gt; should render CycleControls properly" name="Component: &lt;CycleControls /&gt; should render CycleControls properly" time="0.044">
    </testcase>
    <testcase classname="Component: &lt;CycleControls /&gt; should go to the next cycle on arrow right click" name="Component: &lt;CycleControls /&gt; should go to the next cycle on arrow right click" time="0.019">
    </testcase>
    <testcase classname="Component: &lt;CycleControls /&gt; should go to the previous cycle on arrow left click" name="Component: &lt;CycleControls /&gt; should go to the previous cycle on arrow left click" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="ProductListCard" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:48" time="2.195" tests="8">
    <testcase classname="ProductListCard should render ProductListCard with custom combo" name="ProductListCard should render ProductListCard with custom combo" time="0.043">
    </testcase>
    <testcase classname="ProductListCard should render ProductListCard without custom combo" name="ProductListCard should render ProductListCard without custom combo" time="0.007">
    </testcase>
    <testcase classname="ProductListCard should render ProductListCard with unavailable card" name="ProductListCard should render ProductListCard with unavailable card" time="0.015">
    </testcase>
    <testcase classname="ProductListCard should render add button disabled when user is IR and is not auto start enabled" name="ProductListCard should render add button disabled when user is IR and is not auto start enabled" time="0.006">
    </testcase>
    <testcase classname="ProductListCard should render add button not disabled when user is IR and is auto start enabled" name="ProductListCard should render add button not disabled when user is IR and is auto start enabled" time="0.005">
    </testcase>
    <testcase classname="ProductListCard should render add button not disabled when user is not IR and is not auto start enabled" name="ProductListCard should render add button not disabled when user is not IR and is not auto start enabled" time="0.007">
    </testcase>
    <testcase classname="ProductListCard should render discount tag when discount &gt; 0" name="ProductListCard should render discount tag when discount &gt; 0" time="0.007">
    </testcase>
    <testcase classname="ProductListCard should not render discount tag when discount = 0" name="ProductListCard should not render discount tag when discount = 0" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="ProductsByTag" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:49" time="1.677" tests="3">
    <testcase classname="ProductsByTag should render ProductsByTag" name="ProductsByTag should render ProductsByTag" time="0.094">
    </testcase>
    <testcase classname="ProductsByTag should render ProductsByTag with skeleton component" name="ProductsByTag should render ProductsByTag with skeleton component" time="0.024">
    </testcase>
    <testcase classname="ProductsByTag should render ProductsByTag with ProductList component" name="ProductsByTag should render ProductsByTag with ProductList component" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="NavBarCollapse" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:50" time="1.825" tests="2">
    <testcase classname="NavBarCollapse should render the NavBarCollapse" name="NavBarCollapse should render the NavBarCollapse" time="0.025">
    </testcase>
    <testcase classname="NavBarCollapse should render the NavBarCollapse with menu" name="NavBarCollapse should render the NavBarCollapse with menu" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="ProductsCarousel" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:49" time="1.868" tests="2">
    <testcase classname="ProductsCarousel should render ProductsCarousel desktop" name="ProductsCarousel should render ProductsCarousel desktop" time="0.114">
    </testcase>
    <testcase classname="ProductsCarousel should render ProductsCarousel mobile" name="ProductsCarousel should render ProductsCarousel mobile" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="Order Confirmation Container" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:50" time="2.77" tests="2">
    <testcase classname="Order Confirmation Container should not render loading for cart" name="Order Confirmation Container should not render loading for cart" time="0.085">
    </testcase>
    <testcase classname="Order Confirmation Container should render page confirmation when any error in the request" name="Order Confirmation Container should render page confirmation when any error in the request" time="0.132">
    </testcase>
  </testsuite>
  <testsuite name="component: &lt;ExtendedCaptation /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:50" time="3.339" tests="7">
    <testcase classname="component: &lt;ExtendedCaptation /&gt; should render buttons to choose cycle" name="component: &lt;ExtendedCaptation /&gt; should render buttons to choose cycle" time="0.518">
    </testcase>
    <testcase classname="component: &lt;ExtendedCaptation /&gt; should a confirmation message after click in go to new cycle" name="component: &lt;ExtendedCaptation /&gt; should a confirmation message after click in go to new cycle" time="0.071">
    </testcase>
    <testcase classname="component: &lt;ExtendedCaptation /&gt; should a confirmation message after click in stay in extended cycle" name="component: &lt;ExtendedCaptation /&gt; should a confirmation message after click in stay in extended cycle" time="0.057">
    </testcase>
    <testcase classname="component: &lt;ExtendedCaptation /&gt; should the buttons when user click in back to choose cycle - extended cycle" name="component: &lt;ExtendedCaptation /&gt; should the buttons when user click in back to choose cycle - extended cycle" time="0.104">
    </testcase>
    <testcase classname="component: &lt;ExtendedCaptation /&gt; should the buttons when user click in back to choose cycle - new cycle" name="component: &lt;ExtendedCaptation /&gt; should the buttons when user click in back to choose cycle - new cycle" time="0.067">
    </testcase>
    <testcase classname="component: &lt;ExtendedCaptation /&gt; should success message when cycles.status === success" name="component: &lt;ExtendedCaptation /&gt; should success message when cycles.status === success" time="0.017">
    </testcase>
    <testcase classname="component: &lt;ExtendedCaptation /&gt; should error message when cycles.status === success" name="component: &lt;ExtendedCaptation /&gt; should error message when cycles.status === success" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Card /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:52" time="2.898" tests="2">
    <testcase classname="Component: &lt;Card /&gt; should render Card properly" name="Component: &lt;Card /&gt; should render Card properly" time="0.135">
    </testcase>
    <testcase classname="Component: &lt;Card /&gt; should render a card with header and a footer properly" name="Component: &lt;Card /&gt; should render a card with header and a footer properly" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="Component: VWOCodeSnippet" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:52" time="4.398" tests="2">
    <testcase classname="Component: VWOCodeSnippet should render VWO code snippet" name="Component: VWOCodeSnippet should render VWO code snippet" time="0.027">
    </testcase>
    <testcase classname="Component: VWOCodeSnippet should not render VWO code snippet" name="Component: VWOCodeSnippet should not render VWO code snippet" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/helpers" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:54" time="3.152" tests="3">
    <testcase classname="core/utilities/helpers getWhatsAppLink() should return desktop whatsapp link when the device parameter is null" name="core/utilities/helpers getWhatsAppLink() should return desktop whatsapp link when the device parameter is null" time="0.004">
    </testcase>
    <testcase classname="core/utilities/helpers getWhatsAppLink() should return whatsapp link when device is desktop" name="core/utilities/helpers getWhatsAppLink() should return whatsapp link when device is desktop" time="0.001">
    </testcase>
    <testcase classname="core/utilities/helpers getWhatsAppLink() should return whatsapp link when device is mobile" name="core/utilities/helpers getWhatsAppLink() should return whatsapp link when device is mobile" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Page: Error" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:53" time="4.751" tests="1">
    <testcase classname="Page: Error should render Error page" name="Page: Error should render Error page" time="0.199">
    </testcase>
  </testsuite>
  <testsuite name="Logout" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:55" time="3.641" tests="1">
    <testcase classname="Logout should render Logout" name="Logout should render Logout" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="ProductList" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:56" time="2.961" tests="1">
    <testcase classname="ProductList should render ProductList" name="ProductList should render ProductList" time="0.04">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;OrderSuccessTitle /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:58" time="1.867" tests="1">
    <testcase classname="Component: &lt;OrderSuccessTitle /&gt; should render &lt;OrderSuccessTitle /&gt;" name="Component: &lt;OrderSuccessTitle /&gt; should render &lt;OrderSuccessTitle /&gt;" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Scrollbar /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:58" time="1.932" tests="4">
    <testcase classname="Component: &lt;Scrollbar /&gt; should render properly" name="Component: &lt;Scrollbar /&gt; should render properly" time="0.031">
    </testcase>
    <testcase classname="Component: &lt;Scrollbar /&gt; should render with ref" name="Component: &lt;Scrollbar /&gt; should render with ref" time="0.008">
    </testcase>
    <testcase classname="Component: &lt;Scrollbar /&gt; should scroll properly" name="Component: &lt;Scrollbar /&gt; should scroll properly" time="0.01">
    </testcase>
    <testcase classname="Component: &lt;Scrollbar /&gt; Helpers: &lt;Scrollbar /&gt; should return percentage of the scroll position" name="Component: &lt;Scrollbar /&gt; Helpers: &lt;Scrollbar /&gt; should return percentage of the scroll position" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ResaleIntention /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:25:58" time="2.459" tests="2">
    <testcase classname="&lt;ResaleIntention /&gt; should render iR modal" name="&lt;ResaleIntention /&gt; should render iR modal" time="0.102">
    </testcase>
    <testcase classname="&lt;ResaleIntention /&gt; should not render modal when user click in Entendi button" name="&lt;ResaleIntention /&gt; should not render modal when user click in Entendi button" time="0.064">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Drawer&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:00" time="1.678" tests="7">
    <testcase classname="Component: &lt;Drawer&gt; should render &lt;Drawer /&gt; properly" name="Component: &lt;Drawer&gt; should render &lt;Drawer /&gt; properly" time="0.064">
    </testcase>
    <testcase classname="Component: &lt;Drawer&gt; should render &lt;Drawer /&gt; with default values" name="Component: &lt;Drawer&gt; should render &lt;Drawer /&gt; with default values" time="0.013">
    </testcase>
    <testcase classname="Component: &lt;Drawer&gt; should render only one &lt;Drawer /&gt; when both have the same ID" name="Component: &lt;Drawer&gt; should render only one &lt;Drawer /&gt; when both have the same ID" time="0.007">
    </testcase>
    <testcase classname="Component: &lt;Drawer&gt; should not render &lt;Drawer&gt; if it`s not open" name="Component: &lt;Drawer&gt; should not render &lt;Drawer&gt; if it`s not open" time="0.005">
    </testcase>
    <testcase classname="Component: &lt;Drawer&gt; should open &lt;Drawer&gt; when user click on button" name="Component: &lt;Drawer&gt; should open &lt;Drawer&gt; when user click on button" time="0.033">
    </testcase>
    <testcase classname="Component: &lt;Drawer&gt; should close &lt;Drawer&gt; when user press the Escape key" name="Component: &lt;Drawer&gt; should close &lt;Drawer&gt; when user press the Escape key" time="0.017">
    </testcase>
    <testcase classname="Component: &lt;Drawer&gt; should close &lt;Drawer&gt; when user click on &lt;Overlay /&gt; component" name="Component: &lt;Drawer&gt; should close &lt;Drawer&gt; when user click on &lt;Overlay /&gt; component" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Cycle /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:00" time="2.084" tests="1">
    <testcase classname="Component: &lt;Cycle /&gt; should render Cycle properly" name="Component: &lt;Cycle /&gt; should render Cycle properly" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Breadcrumbs /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:01" time="1.531" tests="4">
    <testcase classname="Component: &lt;Breadcrumbs /&gt; should render Breadcrumb properly" name="Component: &lt;Breadcrumbs /&gt; should render Breadcrumb properly" time="0.073">
    </testcase>
    <testcase classname="Component: &lt;Breadcrumbs /&gt; should render desktop Breadcrumb properly" name="Component: &lt;Breadcrumbs /&gt; should render desktop Breadcrumb properly" time="0.017">
    </testcase>
    <testcase classname="Component: &lt;Breadcrumbs /&gt; should show the desktop list when user clicks on the expand button" name="Component: &lt;Breadcrumbs /&gt; should show the desktop list when user clicks on the expand button" time="0.047">
    </testcase>
    <testcase classname="Component: &lt;Breadcrumbs /&gt; should render without tracks" name="Component: &lt;Breadcrumbs /&gt; should render without tracks" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;ProductList /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:00" time="2.145" tests="2">
    <testcase classname="Component: &lt;ProductList /&gt; should render a list of products properly" name="Component: &lt;ProductList /&gt; should render a list of products properly" time="0.124">
    </testcase>
    <testcase classname="Component: &lt;ProductList /&gt; should render Product List Skeleton properly" name="Component: &lt;ProductList /&gt; should render Product List Skeleton properly" time="0.051">
    </testcase>
  </testsuite>
  <testsuite name="Heading Helpers" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:02" time="1.836" tests="2">
    <testcase classname="Heading Helpers get-params return text only" name="Heading Helpers get-params return text only" time="0.022">
    </testcase>
    <testcase classname="Heading Helpers get-params return text with comboCode" name="Heading Helpers get-params return text with comboCode" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Combo /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:02" time="1.844" tests="2">
    <testcase classname="Component: &lt;Combo /&gt; should render Combo in desktop mode" name="Component: &lt;Combo /&gt; should render Combo in desktop mode" time="0.234">
    </testcase>
    <testcase classname="Component: &lt;Combo /&gt; should render Combo in mobile mode" name="Component: &lt;Combo /&gt; should render Combo in mobile mode" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Search /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:02" time="1.842" tests="5">
    <testcase classname="Component: &lt;Search /&gt; should render input search properly" name="Component: &lt;Search /&gt; should render input search properly" time="0.059">
    </testcase>
    <testcase classname="Component: &lt;Search /&gt; should trigger the `onClickSearch` callback" name="Component: &lt;Search /&gt; should trigger the `onClickSearch` callback" time="0.044">
    </testcase>
    <testcase classname="Component: &lt;Search /&gt; should clear input on click in button" name="Component: &lt;Search /&gt; should clear input on click in button" time="0.12">
    </testcase>
    <testcase classname="Component: &lt;Search /&gt; should trigger the `onClickClear` callback" name="Component: &lt;Search /&gt; should trigger the `onClickClear` callback" time="0.075">
    </testcase>
    <testcase classname="Component: &lt;Search /&gt; should render search and type in" name="Component: &lt;Search /&gt; should render search and type in" time="0.345">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ComboButton /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:03" time="1.972" tests="4">
    <testcase classname="&lt;ComboButton /&gt; should render button disabled when user is IR" name="&lt;ComboButton /&gt; should render button disabled when user is IR" time="0.146">
    </testcase>
    <testcase classname="&lt;ComboButton /&gt; should render button avaliable when user is not IR" name="&lt;ComboButton /&gt; should render button avaliable when user is not IR" time="0.008">
    </testcase>
    <testcase classname="&lt;ComboButton /&gt; should render button disabled when user is IR and is not auto start enabled" name="&lt;ComboButton /&gt; should render button disabled when user is IR and is not auto start enabled" time="0.006">
    </testcase>
    <testcase classname="&lt;ComboButton /&gt; should not render button disabled when user is IR and is auto start enabled" name="&lt;ComboButton /&gt; should not render button disabled when user is IR and is auto start enabled" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Checkout Skeleton: &lt;CheckoutSkeleton /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:04" time="1.326" tests="1">
    <testcase classname="Checkout Skeleton: &lt;CheckoutSkeleton /&gt; should render &lt;CheckoutSkeleton /&gt; checkout Skeleton" name="Checkout Skeleton: &lt;CheckoutSkeleton /&gt; should render &lt;CheckoutSkeleton /&gt; checkout Skeleton" time="0.077">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;RadioGroup /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:04" time="1.371" tests="2">
    <testcase classname="Component: &lt;RadioGroup /&gt; should render &lt;RadioGroup /&gt; component with three radio options" name="Component: &lt;RadioGroup /&gt; should render &lt;RadioGroup /&gt; component with three radio options" time="0.031">
    </testcase>
    <testcase classname="Component: &lt;RadioGroup /&gt; should call the method passed to RadioGroup onChange prop when a Radio is clicked" name="Component: &lt;RadioGroup /&gt; should call the method passed to RadioGroup onChange prop when a Radio is clicked" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Icon. /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:04" time="1.313" tests="1">
    <testcase classname="Component: &lt;Icon. /&gt; should render Icon Component properly" name="Component: &lt;Icon. /&gt; should render Icon Component properly" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Generic /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:06" time="2.312" tests="2">
    <testcase classname="Component: &lt;Generic /&gt; should render component properly" name="Component: &lt;Generic /&gt; should render component properly" time="0.049">
    </testcase>
    <testcase classname="Component: &lt;Generic /&gt; should render with a tip" name="Component: &lt;Generic /&gt; should render with a tip" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Carousel /&gt;" errors="0" failures="0" skipped="7" timestamp="2024-05-27T22:26:05" time="2.749" tests="17">
    <testcase classname="Component: &lt;Carousel /&gt; exhibition should render Carousel properly with dots and autoplay" name="Component: &lt;Carousel /&gt; exhibition should render Carousel properly with dots and autoplay" time="0.057">
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; exhibition should render Carousel with 2 itens per page" name="Component: &lt;Carousel /&gt; exhibition should render Carousel with 2 itens per page" time="0.014">
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; exhibition should render selectable desktop Carousel without an item selected" name="Component: &lt;Carousel /&gt; exhibition should render selectable desktop Carousel without an item selected" time="0.027">
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; exhibition should render selectable Carousel with an invalid selected item" name="Component: &lt;Carousel /&gt; exhibition should render selectable Carousel with an invalid selected item" time="0.011">
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; exhibition should render selectable Carousel with an valid selected item" name="Component: &lt;Carousel /&gt; exhibition should render selectable Carousel with an valid selected item" time="0.028">
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; exhibition should render Carousel with 2 itens per page however with less itens" name="Component: &lt;Carousel /&gt; exhibition should render Carousel with 2 itens per page however with less itens" time="0.028">
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; exhibition should render Carousel with slug control" name="Component: &lt;Carousel /&gt; exhibition should render Carousel with slug control" time="0.029">
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; exhibition should render Carousel with matched slug control" name="Component: &lt;Carousel /&gt; exhibition should render Carousel with matched slug control" time="0.031">
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; with autoplay navigation should made transition automatically between slides" name="Component: &lt;Carousel /&gt; with autoplay navigation should made transition automatically between slides" time="0.026">
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; with autoplay navigation should made transition automatically from last to first slide" name="Component: &lt;Carousel /&gt; with autoplay navigation should made transition automatically from last to first slide" time="0.027">
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; user interaction should made transition for the next slides" name="Component: &lt;Carousel /&gt; user interaction should made transition for the next slides" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; user interaction should made transition for the previous slides" name="Component: &lt;Carousel /&gt; user interaction should made transition for the previous slides" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; user interaction should made transition from the last to the first slide" name="Component: &lt;Carousel /&gt; user interaction should made transition from the last to the first slide" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; user interaction should made transition from the first to the last slide" name="Component: &lt;Carousel /&gt; user interaction should made transition from the first to the last slide" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; user interaction should change slide by event click in dots" name="Component: &lt;Carousel /&gt; user interaction should change slide by event click in dots" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; user interaction should click the item and mark as selected" name="Component: &lt;Carousel /&gt; user interaction should click the item and mark as selected" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Component: &lt;Carousel /&gt; user interaction should click the selected item and unmark as selected" name="Component: &lt;Carousel /&gt; user interaction should click the selected item and unmark as selected" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Page: PageBuilder" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:05" time="3.205" tests="1">
    <testcase classname="Page: PageBuilder should render PageBuilder page" name="Page: PageBuilder should render PageBuilder page" time="0.073">
    </testcase>
  </testsuite>
  <testsuite name="Sections: &lt;Footer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:05" time="2.977" tests="1">
    <testcase classname="Sections: &lt;Footer /&gt; should render the Footer" name="Sections: &lt;Footer /&gt; should render the Footer" time="0.057">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Container /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:08" time="1.348" tests="1">
    <testcase classname="Component: &lt;Container /&gt; should render &lt;Container /&gt; with default margin-bottom and margin-top" name="Component: &lt;Container /&gt; should render &lt;Container /&gt; with default margin-bottom and margin-top" time="0.035">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Skeleton /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:08" time="2.262" tests="2">
    <testcase classname="Component: &lt;Skeleton /&gt; should render component" name="Component: &lt;Skeleton /&gt; should render component" time="0.025">
    </testcase>
    <testcase classname="Component: &lt;Skeleton /&gt; should show content data after loading" name="Component: &lt;Skeleton /&gt; should show content data after loading" time="1.017">
    </testcase>
  </testsuite>
  <testsuite name="Container: &lt;Cycle /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:08" time="2.151" tests="3">
    <testcase classname="Container: &lt;Cycle /&gt; should render Cycle component" name="Container: &lt;Cycle /&gt; should render Cycle component" time="0.046">
    </testcase>
    <testcase classname="Container: &lt;Cycle /&gt; should render VDFCycle component" name="Container: &lt;Cycle /&gt; should render VDFCycle component" time="0.015">
    </testcase>
    <testcase classname="Container: &lt;Cycle /&gt; should render Cycle Skeleton component" name="Container: &lt;Cycle /&gt; should render Cycle Skeleton component" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Shipping Model Options" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:09" time="1.972" tests="2">
    <testcase classname="Shipping Model Options should render itens on Shipping Model Options with no available deliveries container" name="Shipping Model Options should render itens on Shipping Model Options with no available deliveries container" time="0.138">
    </testcase>
    <testcase classname="Shipping Model Options should render itens on Shipping Model Options with available deliveries container" name="Shipping Model Options should render itens on Shipping Model Options with available deliveries container" time="0.052">
    </testcase>
  </testsuite>
  <testsuite name="Sections: &lt;Logo /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:10" time="2.224" tests="2">
    <testcase classname="Sections: &lt;Logo /&gt; should render the Logo Boticario" name="Sections: &lt;Logo /&gt; should render the Logo Boticario" time="0.02">
    </testcase>
    <testcase classname="Sections: &lt;Logo /&gt; should render the Logo with a base in the cookie info" name="Sections: &lt;Logo /&gt; should render the Logo with a base in the cookie info" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/i10n" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:11" time="1.518" tests="3">
    <testcase classname="core/utilities/i10n getLocale() should get pt as a locale when the code &quot;portuguese&quot; is provided" name="core/utilities/i10n getLocale() should get pt as a locale when the code &quot;portuguese&quot; is provided" time="0.002">
    </testcase>
    <testcase classname="core/utilities/i10n getLocale() should get pt as a locale when the code &quot;english&quot; is provided" name="core/utilities/i10n getLocale() should get pt as a locale when the code &quot;english&quot; is provided" time="0.001">
    </testcase>
    <testcase classname="core/utilities/i10n getLocale() should get pt as a locale when the language &quot;spanish&quot; is provided" name="core/utilities/i10n getLocale() should get pt as a locale when the language &quot;spanish&quot; is provided" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/helpers" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:11" time="1.128" tests="2">
    <testcase classname="core/utilities/helpers keyMirror() should return mirrored keys properly" name="core/utilities/helpers keyMirror() should return mirrored keys properly" time="0.003">
    </testcase>
    <testcase classname="core/utilities/helpers keyMirror() should throw for bad inputs" name="core/utilities/helpers keyMirror() should throw for bad inputs" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;HeaderCheckout /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:11" time="1.626" tests="2">
    <testcase classname="Component: &lt;HeaderCheckout /&gt; should render component properly" name="Component: &lt;HeaderCheckout /&gt; should render component properly" time="0.081">
    </testcase>
    <testcase classname="Component: &lt;HeaderCheckout /&gt; should click on steps" name="Component: &lt;HeaderCheckout /&gt; should click on steps" time="0.083">
    </testcase>
  </testsuite>
  <testsuite name="src/core/middlewares/tracking" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:12" time="1.297" tests="21">
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Dimensions should return an object with dimension5" name="src/core/middlewares/tracking Google Tag Manager Events Dimensions should return an object with dimension5" time="0.005">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Action tracking event should call tracking for Buy Intention request" name="src/core/middlewares/tracking Google Tag Manager Events Action tracking event should call tracking for Buy Intention request" time="0.001">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Product Impression" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Product Impression" time="0.002">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Add To Cart when dispatch &quot;itemAddFetchRequest&quot;" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Add To Cart when dispatch &quot;itemAddFetchRequest&quot;" time="0">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Add To Cart when dispatch &quot;itemUpdateFetchRequest&quot;" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Add To Cart when dispatch &quot;itemUpdateFetchRequest&quot;" time="0.001">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Add Points Programs To Cart when dispatch &quot;campaignItemAddFetchRequest&quot;" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Add Points Programs To Cart when dispatch &quot;campaignItemAddFetchRequest&quot;" time="0">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for &quot;removeFromCart&quot;" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for &quot;removeFromCart&quot;" time="0.001">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for &quot;removeFromCartPointsPrograms&quot;" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for &quot;removeFromCartPointsPrograms&quot;" time="0">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Checkout option" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Checkout option" time="0.001">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Checkout properly" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Checkout properly" time="0.001">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Purchase properly" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call enhanced ecommerce for Purchase properly" time="0.001">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call click tracking properly" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call click tracking properly" time="0">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call promotionClick tracking properly" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call promotionClick tracking properly" time="0.001">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call error tracking properly" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call error tracking properly" time="0">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call interaction tracking event for search success" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call interaction tracking event for search success" time="0.001">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call interaction tracking event for search failure" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should call interaction tracking event for search failure" time="0">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should not call interaction tracking event for search when action catalog dispath and isSearchSubmit is false" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should not call interaction tracking event for search when action catalog dispath and isSearchSubmit is false" time="0.001">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should not call interaction tracking event for search when isSearchSubmit is true" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should not call interaction tracking event for search when isSearchSubmit is true" time="0">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should not call interaction tracking event for search when isRunning is true" name="src/core/middlewares/tracking Google Tag Manager Events Enhanced Ecommerce should not call interaction tracking event for search when isRunning is true" time="0">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events PointsProgram should call enhanced ecommerce for Add Points Programs To Cart when dispatch &quot;campaignItemAddFetchRequest&quot;" name="src/core/middlewares/tracking Google Tag Manager Events PointsProgram should call enhanced ecommerce for Add Points Programs To Cart when dispatch &quot;campaignItemAddFetchRequest&quot;" time="0.001">
    </testcase>
    <testcase classname="src/core/middlewares/tracking Google Tag Manager Events PointsProgram should call enhanced ecommerce for &quot;removeFromCartPointsPrograms&quot;" name="src/core/middlewares/tracking Google Tag Manager Events PointsProgram should call enhanced ecommerce for &quot;removeFromCartPointsPrograms&quot;" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;ComboEdit /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:12" time="1.464" tests="3">
    <testcase classname="Component: &lt;ComboEdit /&gt; should render ComboEdit modal" name="Component: &lt;ComboEdit /&gt; should render ComboEdit modal" time="0.061">
    </testcase>
    <testcase classname="Component: &lt;ComboEdit /&gt; should redirect on click on primary button" name="Component: &lt;ComboEdit /&gt; should redirect on click on primary button" time="0.008">
    </testcase>
    <testcase classname="Component: &lt;ComboEdit /&gt; should close ComboEditModal on click on close button" name="Component: &lt;ComboEdit /&gt; should close ComboEditModal on click on close button" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Onboard /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:12" time="1.577" tests="2">
    <testcase classname="Component: &lt;Onboard /&gt; should render First Access properly" name="Component: &lt;Onboard /&gt; should render First Access properly" time="0.071">
    </testcase>
    <testcase classname="Component: &lt;Onboard /&gt; should render TakeBack properly" name="Component: &lt;Onboard /&gt; should render TakeBack properly" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Radio /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:13" time="1.448" tests="1">
    <testcase classname="Component: &lt;Radio /&gt; should render &lt;RadioCard /&gt; component with a label" name="Component: &lt;Radio /&gt; should render &lt;RadioCard /&gt; component with a label" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/content/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:13" time="1.477" tests="2">
    <testcase classname="use-cases/content/slices Content actions fetchFailure() should update state with sections page failure payload" name="use-cases/content/slices Content actions fetchFailure() should update state with sections page failure payload" time="0.002">
    </testcase>
    <testcase classname="use-cases/content/slices Content actions sectionsCleanUp() should cleanup the provided page type in order to avoid high memory consumption" name="use-cases/content/slices Content actions sectionsCleanUp() should cleanup the provided page type in order to avoid high memory consumption" time="0">
    </testcase>
  </testsuite>
  <testsuite name="createRequestId" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:14" time="1.315" tests="1">
    <testcase classname="createRequestId should return the cookie value when in the document" name="createRequestId should return the cookie value when in the document" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Toast /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:14" time="1.4" tests="3">
    <testcase classname="Component: &lt;Toast /&gt; should render properly" name="Component: &lt;Toast /&gt; should render properly" time="0.05">
    </testcase>
    <testcase classname="Component: &lt;Toast /&gt; should render with icon" name="Component: &lt;Toast /&gt; should render with icon" time="0.012">
    </testcase>
    <testcase classname="Component: &lt;Toast /&gt; should render with callback" name="Component: &lt;Toast /&gt; should render with callback" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="core/use-cases/order/hooks" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:14" time="1.226" tests="2">
    <testcase classname="core/use-cases/order/hooks useOrder() should to extract data initial from the store state, for order context" name="core/use-cases/order/hooks useOrder() should to extract data initial from the store state, for order context" time="0.014">
    </testcase>
    <testcase classname="core/use-cases/order/hooks useOrder() should to extract data from the store state updated after fetching order" name="core/use-cases/order/hooks useOrder() should to extract data from the store state updated after fetching order" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/cache" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:15" time="1.383" tests="3">
    <testcase classname="core/utilities/cache hasValidCache() should check if cache is invalid" name="core/utilities/cache hasValidCache() should check if cache is invalid" time="0.009">
    </testcase>
    <testcase classname="core/utilities/cache hasValidCache() should check if cache is valid" name="core/utilities/cache hasValidCache() should check if cache is valid" time="0.001">
    </testcase>
    <testcase classname="core/utilities/cache hasValidLocaleCache should check if cache with options is valid" name="core/utilities/cache hasValidLocaleCache should check if cache with options is valid" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:15" time="1.538" tests="2">
    <testcase classname="core/utilities/strings slugify() should transform a string into a slug" name="core/utilities/strings slugify() should transform a string into a slug" time="0.01">
    </testcase>
    <testcase classname="core/utilities/strings slugify() should return an empty string when input is default" name="core/utilities/strings slugify() should return an empty string when input is default" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/dom" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:16" time="1.497" tests="7">
    <testcase classname="core/utilities/dom createScript() should throw an error if parameter is an empty object" name="core/utilities/dom createScript() should throw an error if parameter is an empty object" time="0.003">
    </testcase>
    <testcase classname="core/utilities/dom should return script parameters" name="core/utilities/dom should return script parameters" time="0.003">
    </testcase>
    <testcase classname="core/utilities/dom should return a script with dataset" name="core/utilities/dom should return a script with dataset" time="0.001">
    </testcase>
    <testcase classname="core/utilities/dom should return a script with onload function" name="core/utilities/dom should return a script with onload function" time="0.001">
    </testcase>
    <testcase classname="core/utilities/dom should return a script with onerror function" name="core/utilities/dom should return a script with onerror function" time="0.001">
    </testcase>
    <testcase classname="core/utilities/dom should return a script with onload function with default value" name="core/utilities/dom should return a script with onload function with default value" time="0.001">
    </testcase>
    <testcase classname="core/utilities/dom should return a script with onerror function with default value" name="core/utilities/dom should return a script with onerror function with default value" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/dom" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:16" time="1.478" tests="7">
    <testcase classname="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is 320px" name="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is 320px" time="0.002">
    </testcase>
    <testcase classname="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is between 321px and 450px" name="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is between 321px and 450px" time="0.001">
    </testcase>
    <testcase classname="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is between 451px and 800px" name="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is between 451px and 800px" time="0">
    </testcase>
    <testcase classname="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is between 801px and 1280px" name="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is between 801px and 1280px" time="0">
    </testcase>
    <testcase classname="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is between 1281px and 1680px" name="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is between 1281px and 1680px" time="0.001">
    </testcase>
    <testcase classname="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is between 1681px and 1920px" name="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is between 1681px and 1920px" time="0">
    </testcase>
    <testcase classname="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is bigger than 1920px" name="core/utilities/dom getImageBreakpoint() should define the optimized image width when screen width is bigger than 1920px" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Items /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:16" time="1.428" tests="2">
    <testcase classname="Component: &lt;Items /&gt; should render properly" name="Component: &lt;Items /&gt; should render properly" time="0.062">
    </testcase>
    <testcase classname="Component: &lt;Items /&gt; should render properly without data" name="Component: &lt;Items /&gt; should render properly without data" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="services/presenters/response" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:17" time="1.421" tests="19">
    <testcase classname="services/presenters/response authDetailPresenter() should apply the user data model on user bff response" name="services/presenters/response authDetailPresenter() should apply the user data model on user bff response" time="0.003">
    </testcase>
    <testcase classname="services/presenters/response cartPresenter() should throw a new error in case of cart success false" name="services/presenters/response cartPresenter() should throw a new error in case of cart success false" time="0.016">
    </testcase>
    <testcase classname="services/presenters/response catalogPresenter() should apply the catalog data model on products bff response" name="services/presenters/response catalogPresenter() should apply the catalog data model on products bff response" time="0.004">
    </testcase>
    <testcase classname="services/presenters/response catalogPresenter() should apply the catalog data model on products bff response with fallback cases" name="services/presenters/response catalogPresenter() should apply the catalog data model on products bff response with fallback cases" time="0.002">
    </testcase>
    <testcase classname="services/presenters/response catalogPresenter() should apply the catalog data model in case of any items in bff response" name="services/presenters/response catalogPresenter() should apply the catalog data model in case of any items in bff response" time="0">
    </testcase>
    <testcase classname="services/presenters/response catalogPresenter() should apply the catalog data model in case of not having shortDescription" name="services/presenters/response catalogPresenter() should apply the catalog data model in case of not having shortDescription" time="0.002">
    </testcase>
    <testcase classname="services/presenters/response orderPresenter() should apply the order data model on products bff response" name="services/presenters/response orderPresenter() should apply the order data model on products bff response" time="0.001">
    </testcase>
    <testcase classname="services/presenters/response orderPresenter() should apply the order data model on products bff response with fallback cases" name="services/presenters/response orderPresenter() should apply the order data model on products bff response with fallback cases" time="0.001">
    </testcase>
    <testcase classname="services/presenters/response orderPresenter() should apply the catalog data model on products bff response with fallback cases" name="services/presenters/response orderPresenter() should apply the catalog data model on products bff response with fallback cases" time="0.002">
    </testcase>
    <testcase classname="services/presenters/response paymentMethodsPresenter() should return payment methods" name="services/presenters/response paymentMethodsPresenter() should return payment methods" time="0.002">
    </testcase>
    <testcase classname="services/presenters/response paymentMethodsPresenter() not return the payment method linkPayment" name="services/presenters/response paymentMethodsPresenter() not return the payment method linkPayment" time="0.002">
    </testcase>
    <testcase classname="services/presenters/response creditPresenter() should apply the credit data model on reseller credits bff response" name="services/presenters/response creditPresenter() should apply the credit data model on reseller credits bff response" time="0">
    </testcase>
    <testcase classname="services/presenters/response comboPresenter() should apply the combo model bff response" name="services/presenters/response comboPresenter() should apply the combo model bff response" time="0.001">
    </testcase>
    <testcase classname="services/presenters/response comboPresenter() should apply the combo model empty bff response" name="services/presenters/response comboPresenter() should apply the combo model empty bff response" time="0.001">
    </testcase>
    <testcase classname="services/presenters/response rewardPresenter() should apply the reward data model of bffs response" name="services/presenters/response rewardPresenter() should apply the reward data model of bffs response" time="0.003">
    </testcase>
    <testcase classname="services/presenters/response vdfCyclePresenter() should apply the vdf cycle data model of bffs response" name="services/presenters/response vdfCyclePresenter() should apply the vdf cycle data model of bffs response" time="0.001">
    </testcase>
    <testcase classname="services/presenters/response showcases available presenter() should apply the available showcases data model of bffs response" name="services/presenters/response showcases available presenter() should apply the available showcases data model of bffs response" time="0">
    </testcase>
    <testcase classname="services/presenters/response starlink documents presenter should format and return starlink documents" name="services/presenters/response starlink documents presenter should format and return starlink documents" time="0.005">
    </testcase>
    <testcase classname="services/presenters/response available deliveries presenter should format and return shipping model available deliveries" name="services/presenters/response available deliveries presenter should format and return shipping model available deliveries" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Summary Components" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:17" time="1.811" tests="4">
    <testcase classname="Summary Components should render &lt;ButtonCta /&gt; component" name="Summary Components should render &lt;ButtonCta /&gt; component" time="0.032">
    </testcase>
    <testcase classname="Summary Components should render &lt;Loader /&gt; component" name="Summary Components should render &lt;Loader /&gt; component" time="0.039">
    </testcase>
    <testcase classname="Summary Components should render &lt;Rewards /&gt; component with data" name="Summary Components should render &lt;Rewards /&gt; component with data" time="0.15">
    </testcase>
    <testcase classname="Summary Components should render &lt;Rewards /&gt; component without data" name="Summary Components should render &lt;Rewards /&gt; component without data" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;FooterBase /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:18" time="1.667" tests="2">
    <testcase classname="Component: &lt;FooterBase /&gt; Mobile should render FooterBase properly" name="Component: &lt;FooterBase /&gt; Mobile should render FooterBase properly" time="0.099">
    </testcase>
    <testcase classname="Component: &lt;FooterBase /&gt; Desktop should render FooterBase properly" name="Component: &lt;FooterBase /&gt; Desktop should render FooterBase properly" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:18" time="1.58" tests="1">
    <testcase classname="core/utilities/strings formatNumber() should format a string to only have numbers" name="core/utilities/strings formatNumber() should format a string to only have numbers" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:19" time="1.531" tests="1">
    <testcase classname="core/utilities/strings removeAccents() should return a string without accents" name="core/utilities/strings removeAccents() should return a string without accents" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:19" time="2.108" tests="2">
    <testcase classname="core/utilities/strings removeNonPrintableCharacters() should remove non ASCII characters from a string" name="core/utilities/strings removeNonPrintableCharacters() should remove non ASCII characters from a string" time="0.002">
    </testcase>
    <testcase classname="core/utilities/strings removeNonPrintableCharacters() should return an empty string when input is default" name="core/utilities/strings removeNonPrintableCharacters() should return an empty string when input is default" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Boleto /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:19" time="2.296" tests="3">
    <testcase classname="Component: &lt;Boleto /&gt; should render &lt;Boleto /&gt; in cash" name="Component: &lt;Boleto /&gt; should render &lt;Boleto /&gt; in cash" time="0.121">
    </testcase>
    <testcase classname="Component: &lt;Boleto /&gt; should render &lt;Boleto /&gt; on time" name="Component: &lt;Boleto /&gt; should render &lt;Boleto /&gt; on time" time="0.029">
    </testcase>
    <testcase classname="Component: &lt;Boleto /&gt; should render &lt;Boleto /&gt; on time without dueDate" name="Component: &lt;Boleto /&gt; should render &lt;Boleto /&gt; on time without dueDate" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/i18n" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:20" time="2.652" tests="1">
    <testcase classname="core/utilities/i18n formatCurrency() should format a number to Brazilian currency" name="core/utilities/i18n formatCurrency() should format a number to Brazilian currency" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="on-click-by-step" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:20" time="2.589" tests="2">
    <testcase classname="on-click-by-step on-click-by-step should return options" name="on-click-by-step on-click-by-step should return options" time="0.002">
    </testcase>
    <testcase classname="on-click-by-step on-click-by-step should return pickup store" name="on-click-by-step on-click-by-step should return pickup store" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getOnlyCurrentCycles helper" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:22" time="1.833" tests="1">
    <testcase classname="getOnlyCurrentCycles helper should return only cycles that user is in current cycle" name="getOnlyCurrentCycles helper should return only cycles that user is in current cycle" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;IntlProvider /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:22" time="1.428" tests="1">
    <testcase classname="Component: &lt;IntlProvider /&gt; should render the tag in Portuguese properly" name="Component: &lt;IntlProvider /&gt; should render the tag in Portuguese properly" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/requests" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:23" time="1.238" tests="1">
    <testcase classname="core/utilities/requests bodyResolver() should return undefined if there is no payload" name="core/utilities/requests bodyResolver() should return undefined if there is no payload" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="services/presenters/request" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:23" time="1.218" tests="10">
    <testcase classname="services/presenters/request cartItemUpdatePresenter() should apply the service model on cart bff request" name="services/presenters/request cartItemUpdatePresenter() should apply the service model on cart bff request" time="0.003">
    </testcase>
    <testcase classname="services/presenters/request cartItemUpdatePresenter() should return void when payload is not provided" name="services/presenters/request cartItemUpdatePresenter() should return void when payload is not provided" time="0.001">
    </testcase>
    <testcase classname="services/presenters/request catalogPresenter() should apply the service model on catalog bff request" name="services/presenters/request catalogPresenter() should apply the service model on catalog bff request" time="0.001">
    </testcase>
    <testcase classname="services/presenters/request catalogPresenter() should apply the service model on search when have any parameters in bff request" name="services/presenters/request catalogPresenter() should apply the service model on search when have any parameters in bff request" time="0">
    </testcase>
    <testcase classname="services/presenters/request catalogPresenter() should return void when payload is not provided" name="services/presenters/request catalogPresenter() should return void when payload is not provided" time="0.001">
    </testcase>
    <testcase classname="services/presenters/request paymentDetailsPresenter() should not have installments params in the query string when the parcel is equal to zero" name="services/presenters/request paymentDetailsPresenter() should not have installments params in the query string when the parcel is equal to zero" time="0.001">
    </testcase>
    <testcase classname="services/presenters/request paymentDetailsPresenter() should apply the service model for payment detail bff request" name="services/presenters/request paymentDetailsPresenter() should apply the service model for payment detail bff request" time="0.001">
    </testcase>
    <testcase classname="services/presenters/request paymentDetailsPresenter() should return void when payload is not provided" name="services/presenters/request paymentDetailsPresenter() should return void when payload is not provided" time="0">
    </testcase>
    <testcase classname="services/presenters/request comboPostPresenter() should return combo payload" name="services/presenters/request comboPostPresenter() should return combo payload" time="0.001">
    </testcase>
    <testcase classname="services/presenters/request comboPostPresenter() should return void when payload is not provided" name="services/presenters/request comboPostPresenter() should return void when payload is not provided" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="core/use-cases/checkout/hooks" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:24" time="1.42" tests="4">
    <testcase classname="core/use-cases/checkout/hooks usePaymentMethods() should to extract data initial from the store state, for payment methods context" name="core/use-cases/checkout/hooks usePaymentMethods() should to extract data initial from the store state, for payment methods context" time="0.013">
    </testcase>
    <testcase classname="core/use-cases/checkout/hooks usePaymentMethods() should to extract data from the store state updated after fetching payment methods" name="core/use-cases/checkout/hooks usePaymentMethods() should to extract data from the store state updated after fetching payment methods" time="0.005">
    </testcase>
    <testcase classname="core/use-cases/checkout/hooks usePaymentDetail() should to extract data initial from the store state, for payment details context" name="core/use-cases/checkout/hooks usePaymentDetail() should to extract data initial from the store state, for payment details context" time="0.006">
    </testcase>
    <testcase classname="core/use-cases/checkout/hooks usePaymentDetail() should to extract data from the store state updated after fetching payment methods" name="core/use-cases/checkout/hooks usePaymentDetail() should to extract data from the store state updated after fetching payment methods" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Insert Google Tag Manager" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:24" time="1.253" tests="2">
    <testcase classname="Insert Google Tag Manager should not create script element when called without clientId" name="Insert Google Tag Manager should not create script element when called without clientId" time="0.002">
    </testcase>
    <testcase classname="Insert Google Tag Manager should create script element when called with clientId" name="Insert Google Tag Manager should create script element when called with clientId" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;OrderWrapper /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:24" time="1.257" tests="1">
    <testcase classname="Component: &lt;OrderWrapper /&gt; should render &lt;OrderWrapper /&gt;" name="Component: &lt;OrderWrapper /&gt; should render &lt;OrderWrapper /&gt;" time="0.052">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/content/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:25" time="1.214" tests="8">
    <testcase classname="use-cases/content/slices Content actions fetchRequest() should update state with content page request payload" name="use-cases/content/slices Content actions fetchRequest() should update state with content page request payload" time="0.004">
    </testcase>
    <testcase classname="use-cases/content/slices Content actions fetchRequest() should update state with starlink content page request payload" name="use-cases/content/slices Content actions fetchRequest() should update state with starlink content page request payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/content/slices Content actions fetchRequest() should return when empty document" name="use-cases/content/slices Content actions fetchRequest() should return when empty document" time="0.001">
    </testcase>
    <testcase classname="use-cases/content/slices Content actions fetchSuccess() should update state with starlink content page success payload" name="use-cases/content/slices Content actions fetchSuccess() should update state with starlink content page success payload" time="0">
    </testcase>
    <testcase classname="use-cases/content/slices Content actions fetchSuccess() should return when empty document" name="use-cases/content/slices Content actions fetchSuccess() should return when empty document" time="0">
    </testcase>
    <testcase classname="use-cases/content/slices Content actions fetchFailure() should update state with content page failure payload" name="use-cases/content/slices Content actions fetchFailure() should update state with content page failure payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/content/slices Content actions fetchFailure() should update state with starlink content page failure payload" name="use-cases/content/slices Content actions fetchFailure() should update state with starlink content page failure payload" time="0">
    </testcase>
    <testcase classname="use-cases/content/slices Content actions contentCleanUp() should cleanup the provided page type in order to avoid high memory consumption" name="use-cases/content/slices Content actions contentCleanUp() should cleanup the provided page type in order to avoid high memory consumption" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="core/use-cases/combo/hooks" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:25" time="1.044" tests="1">
    <testcase classname="core/use-cases/combo/hooks useCombo() should get combo data" name="core/use-cases/combo/hooks useCombo() should get combo data" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/i10n" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:25" time="0.992" tests="2">
    <testcase classname="core/utilities/i10n hasPathnamePrefix() should check if the pathname already contains /cc/lc" name="core/utilities/i10n hasPathnamePrefix() should check if the pathname already contains /cc/lc" time="0.003">
    </testcase>
    <testcase classname="core/utilities/i10n isValidLocalePrefix() should check if locale prefix is valid" name="core/utilities/i10n isValidLocalePrefix() should check if locale prefix is valid" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/user/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:25" time="0.968" tests="6">
    <testcase classname="use-cases/user/slices currentDeliveryModeFetch currentDeliveryModeFetch request" name="use-cases/user/slices currentDeliveryModeFetch currentDeliveryModeFetch request" time="0.003">
    </testcase>
    <testcase classname="use-cases/user/slices currentDeliveryModeFetch currentDeliveryModeFetch failure" name="use-cases/user/slices currentDeliveryModeFetch currentDeliveryModeFetch failure" time="0.001">
    </testcase>
    <testcase classname="use-cases/user/slices currentDeliveryModeFetch currentDeliveryModeFetch success" name="use-cases/user/slices currentDeliveryModeFetch currentDeliveryModeFetch success" time="0">
    </testcase>
    <testcase classname="use-cases/user/slices availableDeliveryModesFetch availableDeliveryModesFetch request" name="use-cases/user/slices availableDeliveryModesFetch availableDeliveryModesFetch request" time="0.001">
    </testcase>
    <testcase classname="use-cases/user/slices availableDeliveryModesFetch availableDeliveryModesFetch failure" name="use-cases/user/slices availableDeliveryModesFetch availableDeliveryModesFetch failure" time="0.002">
    </testcase>
    <testcase classname="use-cases/user/slices availableDeliveryModesFetch availableDeliveryModesFetch success" name="use-cases/user/slices availableDeliveryModesFetch availableDeliveryModesFetch success" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="core/use-cases/cart/hooks" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:26" time="1.227" tests="2">
    <testcase classname="core/use-cases/cart/hooks useCart() Should to extract data from the store state, for cart context" name="core/use-cases/cart/hooks useCart() Should to extract data from the store state, for cart context" time="0.01">
    </testcase>
    <testcase classname="core/use-cases/cart/hooks useMinOrderConfirmation() Should to extract data from the store state and retrieve minOrderConfirmation status" name="core/use-cases/cart/hooks useMinOrderConfirmation() Should to extract data from the store state and retrieve minOrderConfirmation status" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Loader /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:27" time="1.053" tests="2">
    <testcase classname="Component: &lt;Loader /&gt; should render Loader properly" name="Component: &lt;Loader /&gt; should render Loader properly" time="0.024">
    </testcase>
    <testcase classname="Component: &lt;Loader /&gt; should render Loader FullScreen properly" name="Component: &lt;Loader /&gt; should render Loader FullScreen properly" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;ProgressSteps /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:26" time="1.284" tests="3">
    <testcase classname="Component: &lt;ProgressSteps /&gt; should render component properly" name="Component: &lt;ProgressSteps /&gt; should render component properly" time="0.045">
    </testcase>
    <testcase classname="Component: &lt;ProgressSteps /&gt; should set second step active" name="Component: &lt;ProgressSteps /&gt; should set second step active" time="0.008">
    </testcase>
    <testcase classname="Component: &lt;ProgressSteps /&gt; should not render if children is not a Step" name="Component: &lt;ProgressSteps /&gt; should not render if children is not a Step" time="0.049">
    </testcase>
  </testsuite>
  <testsuite name="Tooltip" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:27" time="1.216" tests="3">
    <testcase classname="Tooltip should render component properly" name="Tooltip should render component properly" time="0.043">
    </testcase>
    <testcase classname="Tooltip should click and open tooltip" name="Tooltip should click and open tooltip" time="0.053">
    </testcase>
    <testcase classname="Tooltip should click outside and close tooltip" name="Tooltip should click outside and close tooltip" time="0.064">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:27" time="1.254" tests="1">
    <testcase classname="core/utilities/strings cleanUp() should clean up a string replacing empty spaces for a dash" name="core/utilities/strings cleanUp() should clean up a string replacing empty spaces for a dash" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="checkIfCanBuyOnlyInER helper" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:28" time="1.114" tests="3">
    <testcase classname="checkIfCanBuyOnlyInER helper should return true when cycles.lenght === 2 and isExtendedCaptation = false" name="checkIfCanBuyOnlyInER helper should return true when cycles.lenght === 2 and isExtendedCaptation = false" time="0.002">
    </testcase>
    <testcase classname="checkIfCanBuyOnlyInER helper should return false when cycles.lenght === 2 and isExtendedCaptation = true" name="checkIfCanBuyOnlyInER helper should return false when cycles.lenght === 2 and isExtendedCaptation = true" time="0.001">
    </testcase>
    <testcase classname="checkIfCanBuyOnlyInER helper should return false when cycles.lenght === 1 and isExtendedCaptation = false" name="checkIfCanBuyOnlyInER helper should return false when cycles.lenght === 1 and isExtendedCaptation = false" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/money" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:28" time="1.047" tests="1">
    <testcase classname="core/utilities/money money() Should perform multiply operation with floating point number" name="core/utilities/money money() Should perform multiply operation with floating point number" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;VdfCycleEmpty /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:28" time="1.513" tests="2">
    <testcase classname="Component: &lt;VdfCycleEmpty /&gt; should render VdfCycleEmpty properly" name="Component: &lt;VdfCycleEmpty /&gt; should render VdfCycleEmpty properly" time="0.035">
    </testcase>
    <testcase classname="Component: &lt;VdfCycleEmpty /&gt; should call reload cycle action on click" name="Component: &lt;VdfCycleEmpty /&gt; should call reload cycle action on click" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;ProgressBar /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:29" time="1.031" tests="3">
    <testcase classname="Component: &lt;ProgressBar /&gt; should render ProgressBar properly" name="Component: &lt;ProgressBar /&gt; should render ProgressBar properly" time="0.043">
    </testcase>
    <testcase classname="Component: &lt;ProgressBar /&gt; should render ProgressBar properly with 100%" name="Component: &lt;ProgressBar /&gt; should render ProgressBar properly with 100%" time="0.011">
    </testcase>
    <testcase classname="Component: &lt;ProgressBar /&gt; should render ProgressCircle properly" name="Component: &lt;ProgressBar /&gt; should render ProgressCircle properly" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Items /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:29" time="1.087" tests="4">
    <testcase classname="Component: &lt;Items /&gt; should not render items" name="Component: &lt;Items /&gt; should not render items" time="0.012">
    </testcase>
    <testcase classname="Component: &lt;Items /&gt; should render items" name="Component: &lt;Items /&gt; should render items" time="0.066">
    </testcase>
    <testcase classname="Component: &lt;Items /&gt; should render multiple items" name="Component: &lt;Items /&gt; should render multiple items" time="0.039">
    </testcase>
    <testcase classname="Component: &lt;Items /&gt; should delete item" name="Component: &lt;Items /&gt; should delete item" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ProductListPrices /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:29" time="1.473" tests="4">
    <testcase classname="&lt;ProductListPrices /&gt; should show old price when the both has discount" name="&lt;ProductListPrices /&gt; should show old price when the both has discount" time="0.023">
    </testcase>
    <testcase classname="&lt;ProductListPrices /&gt; should show old price when it has discount only in consumerPrice" name="&lt;ProductListPrices /&gt; should show old price when it has discount only in consumerPrice" time="0.003">
    </testcase>
    <testcase classname="&lt;ProductListPrices /&gt; should show old price when it has discount only resellerPrice" name="&lt;ProductListPrices /&gt; should show old price when it has discount only resellerPrice" time="0.004">
    </testcase>
    <testcase classname="&lt;ProductListPrices /&gt; should not show old price when the both does not have promotion" name="&lt;ProductListPrices /&gt; should not show old price when the both does not have promotion" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getNewCycle helper" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:30" time="1.359" tests="1">
    <testcase classname="getNewCycle helper should return new cycle" name="getNewCycle helper should return new cycle" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="core/use-cases/sections/hooks" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:30" time="1.311" tests="2">
    <testcase classname="core/use-cases/sections/hooks useSections() should to extract data initial from the store state, for sections context" name="core/use-cases/sections/hooks useSections() should to extract data initial from the store state, for sections context" time="0.016">
    </testcase>
    <testcase classname="core/use-cases/sections/hooks useSections() should to extract data from the store state updated after fetching sections" name="core/use-cases/sections/hooks useSections() should to extract data from the store state updated after fetching sections" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/cart/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:30" time="1.337" tests="26">
    <testcase classname="use-cases/cart/slices Cart actions cleanUp() should clean up cart to it`s initial state" name="use-cases/cart/slices Cart actions cleanUp() should clean up cart to it`s initial state" time="0.003">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions fetchRequest() should update state with cart request payload" name="use-cases/cart/slices Cart actions fetchRequest() should update state with cart request payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions fetchSuccess() should update state with cart success payload" name="use-cases/cart/slices Cart actions fetchSuccess() should update state with cart success payload" time="0.002">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions fetchFailure() should update state with when cart failure payload" name="use-cases/cart/slices Cart actions fetchFailure() should update state with when cart failure payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions fetchRequest for Gifts() should update state with cart request payload" name="use-cases/cart/slices Cart actions fetchRequest for Gifts() should update state with cart request payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions fetchRequest for Gifts() should update state with cart success payload" name="use-cases/cart/slices Cart actions fetchRequest for Gifts() should update state with cart success payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions fetchRequest for Gifts() should update state with when cart failure payload" name="use-cases/cart/slices Cart actions fetchRequest for Gifts() should update state with when cart failure payload" time="0">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions itemAddFetchRequest() should update state with cart when item add request" name="use-cases/cart/slices Cart actions itemAddFetchRequest() should update state with cart when item add request" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions itemAddFetchSuccess() should update state with cart when item add success" name="use-cases/cart/slices Cart actions itemAddFetchSuccess() should update state with cart when item add success" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions itemAddFetchFailure() should update state with cart when item add failure" name="use-cases/cart/slices Cart actions itemAddFetchFailure() should update state with cart when item add failure" time="0.002">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions itemDeleteFetchRequest() should update state with cart when item delete" name="use-cases/cart/slices Cart actions itemDeleteFetchRequest() should update state with cart when item delete" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions itemDeleteFetchSuccess() should update state with cart when item delete success" name="use-cases/cart/slices Cart actions itemDeleteFetchSuccess() should update state with cart when item delete success" time="0.002">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions itemDeleteFetchFailure() should update state with cart when item delete failure" name="use-cases/cart/slices Cart actions itemDeleteFetchFailure() should update state with cart when item delete failure" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions itemUpdateFetchRequest() should update state with cart when item update request" name="use-cases/cart/slices Cart actions itemUpdateFetchRequest() should update state with cart when item update request" time="0">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions itemUpdateFetchSuccess() should update state with cart when item update success" name="use-cases/cart/slices Cart actions itemUpdateFetchSuccess() should update state with cart when item update success" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions itemUpdateFetchFailure() should update state with cart when item delete failure" name="use-cases/cart/slices Cart actions itemUpdateFetchFailure() should update state with cart when item delete failure" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions toggleDeleteConfirmation() should update cart state when choose option item delete" name="use-cases/cart/slices Cart actions toggleDeleteConfirmation() should update cart state when choose option item delete" time="0.002">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions toggleDeleteConfirmation() should update the cart status when choose the option to close modal" name="use-cases/cart/slices Cart actions toggleDeleteConfirmation() should update the cart status when choose the option to close modal" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions toggleDeleteConfirmation() should update the cart status when choose the option to close modal and not found item" name="use-cases/cart/slices Cart actions toggleDeleteConfirmation() should update the cart status when choose the option to close modal and not found item" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions setCouponFetch() should update the coupon status when a valid coupon is added" name="use-cases/cart/slices Cart actions setCouponFetch() should update the coupon status when a valid coupon is added" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions setCouponFetch() should update the coupon status when a not valid coupon is added" name="use-cases/cart/slices Cart actions setCouponFetch() should update the coupon status when a not valid coupon is added" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions setIsValidCoupon() should update isValidCoupon" name="use-cases/cart/slices Cart actions setIsValidCoupon() should update isValidCoupon" time="0">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions minOrderConfirmation() should open a cart total is less than min order value" name="use-cases/cart/slices Cart actions minOrderConfirmation() should open a cart total is less than min order value" time="0.001">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions toggleComboEditConfirmation() should open the combo edit modal" name="use-cases/cart/slices Cart actions toggleComboEditConfirmation() should open the combo edit modal" time="0">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions toggleComboEditConfirmation() should close the combo edit modal" name="use-cases/cart/slices Cart actions toggleComboEditConfirmation() should close the combo edit modal" time="0">
    </testcase>
    <testcase classname="use-cases/cart/slices Cart actions toggleComboEditConfirmation() should close the combo edit modal when cart was closed" name="use-cases/cart/slices Cart actions toggleComboEditConfirmation() should close the combo edit modal when cart was closed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/requests" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:30" time="1.229" tests="5">
    <testcase classname="core/utilities/requests urlResolver() should return a baseUrl without endpoint when no param is provided" name="core/utilities/requests urlResolver() should return a baseUrl without endpoint when no param is provided" time="0.004">
    </testcase>
    <testcase classname="core/utilities/requests urlResolver() should return a baseUrl with endpoint" name="core/utilities/requests urlResolver() should return a baseUrl with endpoint" time="0.002">
    </testcase>
    <testcase classname="core/utilities/requests urlResolver() should return a baseUrl with endpoint and params when called with payload" name="core/utilities/requests urlResolver() should return a baseUrl with endpoint and params when called with payload" time="0.002">
    </testcase>
    <testcase classname="core/utilities/requests urlResolver() should return a baseUrl with endpoint and params when called with payload and endpoint has params" name="core/utilities/requests urlResolver() should return a baseUrl with endpoint and params when called with payload and endpoint has params" time="0.003">
    </testcase>
    <testcase classname="core/utilities/requests urlResolver() should return a url when called with url" name="core/utilities/requests urlResolver() should return a url when called with url" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Address Mapper" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:31" time="1.506" tests="7">
    <testcase classname="Address Mapper should render with business model code 1" name="Address Mapper should render with business model code 1" time="0.028">
    </testcase>
    <testcase classname="Address Mapper should render with business model code 16" name="Address Mapper should render with business model code 16" time="0.006">
    </testcase>
    <testcase classname="Address Mapper should render with business model code 18" name="Address Mapper should render with business model code 18" time="0.007">
    </testcase>
    <testcase classname="Address Mapper should render without data" name="Address Mapper should render without data" time="0.01">
    </testcase>
    <testcase classname="Address Mapper should render business model code 1 without data address" name="Address Mapper should render business model code 1 without data address" time="0.004">
    </testcase>
    <testcase classname="Address Mapper should render business model code 16 without data address" name="Address Mapper should render business model code 16 without data address" time="0.004">
    </testcase>
    <testcase classname="Address Mapper should render business model code 18 without data address" name="Address Mapper should render business model code 18 without data address" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="List" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:32" time="1.587" tests="5">
    <testcase classname="List should render component properly with 3 itens" name="List should render component properly with 3 itens" time="0.037">
    </testcase>
    <testcase classname="List should render a single item" name="List should render a single item" time="0.006">
    </testcase>
    <testcase classname="List should render a list with a header text properly" name="List should render a list with a header text properly" time="0.004">
    </testcase>
    <testcase classname="List should render a list with a footer and callback button properly" name="List should render a list with a footer and callback button properly" time="0.012">
    </testcase>
    <testcase classname="List should not render if children is not a Item" name="List should not render if children is not a Item" time="0.034">
    </testcase>
  </testsuite>
  <testsuite name="Template: Error 500" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:32" time="1.687" tests="5">
    <testcase classname="Template: Error 500 should render content" name="Template: Error 500 should render content" time="0.065">
    </testcase>
    <testcase classname="Template: Error 400 should render content" name="Template: Error 400 should render content" time="0.008">
    </testcase>
    <testcase classname="Template: Error 401 should render content" name="Template: Error 401 should render content" time="0.007">
    </testcase>
    <testcase classname="Template: Error 403 should render content" name="Template: Error 403 should render content" time="0.012">
    </testcase>
    <testcase classname="Template: ErrorProcess should render content" name="Template: ErrorProcess should render content" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Checkout View: &lt;Payment /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:32" time="1.733" tests="1">
    <testcase classname="Checkout View: &lt;Payment /&gt; should render &lt;Payment /&gt; checkout view" name="Checkout View: &lt;Payment /&gt; should render &lt;Payment /&gt; checkout view" time="0.046">
    </testcase>
  </testsuite>
  <testsuite name="Container: &lt;Icon /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:33" time="1.624" tests="3">
    <testcase classname="Container: &lt;Icon /&gt; should render Icon" name="Container: &lt;Icon /&gt; should render Icon" time="0.024">
    </testcase>
    <testcase classname="Container: &lt;Icon /&gt; should render Icon with props iconName" name="Container: &lt;Icon /&gt; should render Icon with props iconName" time="0.004">
    </testcase>
    <testcase classname="Container: &lt;Icon /&gt; should not render Icon component" name="Container: &lt;Icon /&gt; should not render Icon component" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:33" time="1.471" tests="1">
    <testcase classname="core/utilities/strings cleanUpURI() should return a clean string" name="core/utilities/strings cleanUpURI() should return a clean string" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Address Mapper" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:34" time="1.468" tests="2">
    <testcase classname="Address Mapper should render with data" name="Address Mapper should render with data" time="0.052">
    </testcase>
    <testcase classname="Address Mapper should render without data" name="Address Mapper should render without data" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/app" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:34" time="1.46" tests="21">
    <testcase classname="use-cases/app App actions showNotification() should add a notification into state" name="use-cases/app App actions showNotification() should add a notification into state" time="0.007">
    </testcase>
    <testcase classname="use-cases/app App actions showNotification() should show a notification with message error" name="use-cases/app App actions showNotification() should show a notification with message error" time="0.003">
    </testcase>
    <testcase classname="use-cases/app App actions showNotification() should add a notification into state even when do not pass the ID property in the action" name="use-cases/app App actions showNotification() should add a notification into state even when do not pass the ID property in the action" time="0.001">
    </testcase>
    <testcase classname="use-cases/app App actions hideNotification() should remove a notification with a given id" name="use-cases/app App actions hideNotification() should remove a notification with a given id" time="0">
    </testcase>
    <testcase classname="use-cases/app App actions setScreenSize() should update state when user screen size is bigger then 1024px" name="use-cases/app App actions setScreenSize() should update state when user screen size is bigger then 1024px" time="0.001">
    </testcase>
    <testcase classname="use-cases/app App actions toggleCart() should update state when user open cart" name="use-cases/app App actions toggleCart() should update state when user open cart" time="0">
    </testcase>
    <testcase classname="use-cases/app App actions toggleCart() should update state when user close cart" name="use-cases/app App actions toggleCart() should update state when user close cart" time="0.001">
    </testcase>
    <testcase classname="use-cases/app App actions toggleMenu() should update state when user open menu" name="use-cases/app App actions toggleMenu() should update state when user open menu" time="0">
    </testcase>
    <testcase classname="use-cases/app App actions toggleMenu() should update state when user close menu" name="use-cases/app App actions toggleMenu() should update state when user close menu" time="0">
    </testcase>
    <testcase classname="use-cases/app App actions toggleShipping() should update state when shipping model is active" name="use-cases/app App actions toggleShipping() should update state when shipping model is active" time="0.001">
    </testcase>
    <testcase classname="use-cases/app App actions toggleShipping() should update state when shipping model is close" name="use-cases/app App actions toggleShipping() should update state when shipping model is close" time="0">
    </testcase>
    <testcase classname="use-cases/app App actions toggleShipping() should not update state when payload is empty" name="use-cases/app App actions toggleShipping() should not update state when payload is empty" time="0.001">
    </testcase>
    <testcase classname="use-cases/app App actions setLocation() set new location when location change" name="use-cases/app App actions setLocation() set new location when location change" time="0">
    </testcase>
    <testcase classname="use-cases/app App actions setLocation() should not update state when payload is empty" name="use-cases/app App actions setLocation() should not update state when payload is empty" time="0.012">
    </testcase>
    <testcase classname="use-cases/app App actions setBreadcrumbs() add breadcrumbs when location change" name="use-cases/app App actions setBreadcrumbs() add breadcrumbs when location change" time="0.001">
    </testcase>
    <testcase classname="use-cases/app App actions setBreadcrumbs() add breadcrumbs when location change with no previous path" name="use-cases/app App actions setBreadcrumbs() add breadcrumbs when location change with no previous path" time="0.001">
    </testcase>
    <testcase classname="use-cases/app App actions setBreadcrumbs() set breadcrumbs with the current path name from the route list" name="use-cases/app App actions setBreadcrumbs() set breadcrumbs with the current path name from the route list" time="0">
    </testcase>
    <testcase classname="use-cases/app App actions setBreadcrumbs() try add breadcrumbs with empty payload" name="use-cases/app App actions setBreadcrumbs() try add breadcrumbs with empty payload" time="0">
    </testcase>
    <testcase classname="use-cases/app App actions setLoading() should restore inicial value to isLoading state when message is empty" name="use-cases/app App actions setLoading() should restore inicial value to isLoading state when message is empty" time="0">
    </testcase>
    <testcase classname="use-cases/app App actions setLoading() should update isLoading state when message has valid value" name="use-cases/app App actions setLoading() should update isLoading state when message has valid value" time="0.001">
    </testcase>
    <testcase classname="use-cases/app App actions togglePointsProgram() should update isPointsProgramActive state when dispatch action &quot;togglePointsProgram&quot;" name="use-cases/app App actions togglePointsProgram() should update isPointsProgramActive state when dispatch action &quot;togglePointsProgram&quot;" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:35" time="1.297" tests="1">
    <testcase classname="core/utilities/strings removeEmojis() should remove emojis from a string" name="core/utilities/strings removeEmojis() should remove emojis from a string" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Layout /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:35" time="1.054" tests="3">
    <testcase classname="Component: &lt;Layout /&gt; should render &lt;Layout /&gt; with alternate color" name="Component: &lt;Layout /&gt; should render &lt;Layout /&gt; with alternate color" time="0.027">
    </testcase>
    <testcase classname="Component: &lt;Layout /&gt; should render &lt;Layout /&gt; with content" name="Component: &lt;Layout /&gt; should render &lt;Layout /&gt; with content" time="0.011">
    </testcase>
    <testcase classname="Component: &lt;Layout /&gt; should render Layout with loader" name="Component: &lt;Layout /&gt; should render Layout with loader" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Modal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:35" time="1.194" tests="10">
    <testcase classname="Component: &lt;Modal /&gt; should render properly" name="Component: &lt;Modal /&gt; should render properly" time="0.054">
    </testcase>
    <testcase classname="Component: &lt;Modal /&gt; should render in a Portal properly" name="Component: &lt;Modal /&gt; should render in a Portal properly" time="0.008">
    </testcase>
    <testcase classname="Component: &lt;Modal /&gt; should not show modal" name="Component: &lt;Modal /&gt; should not show modal" time="0.006">
    </testcase>
    <testcase classname="Component: &lt;Modal /&gt; should render modal with a custom Header and Footer" name="Component: &lt;Modal /&gt; should render modal with a custom Header and Footer" time="0.01">
    </testcase>
    <testcase classname="Component: &lt;Modal /&gt; Variants should render a informative modal properly and click on primary button" name="Component: &lt;Modal /&gt; Variants should render a informative modal properly and click on primary button" time="0.043">
    </testcase>
    <testcase classname="Component: &lt;Modal /&gt; Variants should render a desctrutive modal properly and click on secondary button" name="Component: &lt;Modal /&gt; Variants should render a desctrutive modal properly and click on secondary button" time="0.026">
    </testcase>
    <testcase classname="Component: &lt;Modal /&gt; Variants should render a confirmative modal properly and click on cancel button" name="Component: &lt;Modal /&gt; Variants should render a confirmative modal properly and click on cancel button" time="0.019">
    </testcase>
    <testcase classname="Component: &lt;Modal /&gt; Interactions should user click and close modal" name="Component: &lt;Modal /&gt; Interactions should user click and close modal" time="0.014">
    </testcase>
    <testcase classname="Component: &lt;Modal /&gt; Interactions should user click and not close modal when prevetClose is set" name="Component: &lt;Modal /&gt; Interactions should user click and not close modal when prevetClose is set" time="0.008">
    </testcase>
    <testcase classname="Component: &lt;Modal /&gt; Interactions should user click outside dialog and close modal" name="Component: &lt;Modal /&gt; Interactions should user click outside dialog and close modal" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/catalog/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:35" time="1.317" tests="4">
    <testcase classname="use-cases/catalog/slices Catalog actions fetchRequest() should update state with catalog request payload" name="use-cases/catalog/slices Catalog actions fetchRequest() should update state with catalog request payload" time="0.003">
    </testcase>
    <testcase classname="use-cases/catalog/slices Catalog actions fetchRequest() should update state of catalog in the request and with query params in the payload" name="use-cases/catalog/slices Catalog actions fetchRequest() should update state of catalog in the request and with query params in the payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/catalog/slices Catalog actions fetchSuccess() should update state with catalog success payload" name="use-cases/catalog/slices Catalog actions fetchSuccess() should update state with catalog success payload" time="0.003">
    </testcase>
    <testcase classname="use-cases/catalog/slices Catalog actions fetchFailure() should update state with catalog failure payload" name="use-cases/catalog/slices Catalog actions fetchFailure() should update state with catalog failure payload" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;HeaderOrderSuccess /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:36" time="1.353" tests="1">
    <testcase classname="Component: &lt;HeaderOrderSuccess /&gt; should render &lt;HeaderOrderSuccess /&gt;" name="Component: &lt;HeaderOrderSuccess /&gt; should render &lt;HeaderOrderSuccess /&gt;" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Header /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:36" time="1.338" tests="1">
    <testcase classname="Component: &lt;Header /&gt; Mobile should render Header properly" name="Component: &lt;Header /&gt; Mobile should render Header properly" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/auth/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:37" time="1.254" tests="1">
    <testcase classname="use-cases/auth/slices Auth actions setAccessToken() should add a token into state" name="use-cases/auth/slices Auth actions setAccessToken() should add a token into state" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;TopBar /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:37" time="1.277" tests="1">
    <testcase classname="Component: &lt;TopBar /&gt; should render TopBar properly" name="Component: &lt;TopBar /&gt; should render TopBar properly" time="0.053">
    </testcase>
  </testsuite>
  <testsuite name="Brands Helpers" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:38" time="1.369" tests="3">
    <testcase classname="Brands Helpers getFontSRC() should create a @font-face src property from a given font source paths list" name="Brands Helpers getFontSRC() should create a @font-face src property from a given font source paths list" time="0.007">
    </testcase>
    <testcase classname="Brands Helpers createFontVariants() should create a list of @font-face variants from a given font source paths list" name="Brands Helpers createFontVariants() should create a list of @font-face variants from a given font source paths list" time="0.002">
    </testcase>
    <testcase classname="Brands Helpers createFontFace() should create a @font-face list from given brand typography object" name="Brands Helpers createFontFace() should create a @font-face list from given brand typography object" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/flux" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:38" time="1.403" tests="4">
    <testcase classname="core/utilities/flux createAction() should throw when payloadCreator is not provided" name="core/utilities/flux createAction() should throw when payloadCreator is not provided" time="0.007">
    </testcase>
    <testcase classname="core/utilities/flux createAction() should return an action creator without input" name="core/utilities/flux createAction() should return an action creator without input" time="0.002">
    </testcase>
    <testcase classname="core/utilities/flux createAction() should return an action creator with a string" name="core/utilities/flux createAction() should return an action creator with a string" time="0.001">
    </testcase>
    <testcase classname="core/utilities/flux createAction() should return an action creator with an object" name="core/utilities/flux createAction() should return an action creator with an object" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;ButtonGroup /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:38" time="1.678" tests="2">
    <testcase classname="Component: &lt;ButtonGroup /&gt; should render a group of buttons properly" name="Component: &lt;ButtonGroup /&gt; should render a group of buttons properly" time="0.054">
    </testcase>
    <testcase classname="Component: &lt;ButtonGroup /&gt; incorrect usage Render ButtonGroup with any child" name="Component: &lt;ButtonGroup /&gt; incorrect usage Render ButtonGroup with any child" time="0.066">
    </testcase>
  </testsuite>
  <testsuite name="isPublicRoute" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:38" time="1.656" tests="1">
    <testcase classname="isPublicRoute should return the correct public route status" name="isPublicRoute should return the correct public route status" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/i10n" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:39" time="1.507" tests="3">
    <testcase classname="core/utilities/i10n getLanguageTag() should get the IETF code for a locale" name="core/utilities/i10n getLanguageTag() should get the IETF code for a locale" time="0.002">
    </testcase>
    <testcase classname="core/utilities/i10n getLanguageTag() should get the IETF code in lowercase when format is lc_cc" name="core/utilities/i10n getLanguageTag() should get the IETF code in lowercase when format is lc_cc" time="0">
    </testcase>
    <testcase classname="core/utilities/i10n getLanguageTag() should get default language fallback" name="core/utilities/i10n getLanguageTag() should get default language fallback" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/dom" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:39" time="1.496" tests="3">
    <testcase classname="core/utilities/dom getTargetTop() should get the offset height of the target element" name="core/utilities/dom getTargetTop() should get the offset height of the target element" time="0.002">
    </testcase>
    <testcase classname="core/utilities/dom scrollTop should call event &quot;scrollTo&quot; when animate key is false" name="core/utilities/dom scrollTop should call event &quot;scrollTo&quot; when animate key is false" time="0.001">
    </testcase>
    <testcase classname="core/utilities/dom scrollTop should catch rejects when a new error is provided" name="core/utilities/dom scrollTop should catch rejects when a new error is provided" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:40" time="1.355" tests="1">
    <testcase classname="core/utilities/strings capitalize() should return a string capitalized" name="core/utilities/strings capitalize() should return a string capitalized" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useMicroFrontend Hook" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:40" time="1.533" tests="1">
    <testcase classname="useMicroFrontend Hook should render a element with params" name="useMicroFrontend Hook should render a element with params" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="notice-error helper" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:41" time="1.111" tests="2">
    <testcase classname="notice-error helper should call noticeError to segmentation error with data" name="notice-error helper should call noticeError to segmentation error with data" time="0.002">
    </testcase>
    <testcase classname="notice-error helper should call noticeError to segmentation error without data" name="notice-error helper should call noticeError to segmentation error without data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Link /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:41" time="1.287" tests="18">
    <testcase classname="Component: &lt;Link /&gt; should render Link without anchor when the to/path param is empty" name="Component: &lt;Link /&gt; should render Link without anchor when the to/path param is empty" time="0.084">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link with an anchor" name="Component: &lt;Link /&gt; should render Link with an anchor" time="0.003">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link, replacing the current site url for anchor" name="Component: &lt;Link /&gt; should render Link, replacing the current site url for anchor" time="0.003">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link, replacing the current basesite url for pathname" name="Component: &lt;Link /&gt; should render Link, replacing the current basesite url for pathname" time="0.003">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link, replacing the current basesite for pathname with params" name="Component: &lt;Link /&gt; should render Link, replacing the current basesite for pathname with params" time="0.003">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link, with external https url and blank target" name="Component: &lt;Link /&gt; should render Link, with external https url and blank target" time="0.003">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link, with external http url and blank target" name="Component: &lt;Link /&gt; should render Link, with external http url and blank target" time="0.009">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link to an inner application route" name="Component: &lt;Link /&gt; should render Link to an inner application route" time="0.01">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link to an inner application route with locale" name="Component: &lt;Link /&gt; should render Link to an inner application route with locale" time="0.009">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link to an inner application route with locale and params" name="Component: &lt;Link /&gt; should render Link to an inner application route with locale and params" time="0.004">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link with providing a router location object" name="Component: &lt;Link /&gt; should render Link with providing a router location object" time="0.003">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link with providing a router location object with search attribute" name="Component: &lt;Link /&gt; should render Link with providing a router location object with search attribute" time="0.003">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link with an empty location object" name="Component: &lt;Link /&gt; should render Link with an empty location object" time="0.002">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render Link with an location with empty object" name="Component: &lt;Link /&gt; should render Link with an location with empty object" time="0.003">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should render a Router NavLink" name="Component: &lt;Link /&gt; should render a Router NavLink" time="0.002">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should trigger the `onClick` callback" name="Component: &lt;Link /&gt; should trigger the `onClick` callback" time="0.032">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should trigger the `onClick` fallback" name="Component: &lt;Link /&gt; should trigger the `onClick` fallback" time="0.007">
    </testcase>
    <testcase classname="Component: &lt;Link /&gt; should scroll to anchor element when user clicks in anchor" name="Component: &lt;Link /&gt; should scroll to anchor element when user clicks in anchor" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="viewItemListResolver" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:41" time="1.206" tests="2">
    <testcase classname="viewItemListResolver should return the dataLayer data" name="viewItemListResolver should return the dataLayer data" time="0.006">
    </testcase>
    <testcase classname="viewItemListResolver should return dataLayer data when empty items" name="viewItemListResolver should return dataLayer data when empty items" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;ErrorBanner /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:41" time="1.257" tests="2">
    <testcase classname="Component: &lt;ErrorBanner /&gt; should render ErrorBanner properly" name="Component: &lt;ErrorBanner /&gt; should render ErrorBanner properly" time="0.068">
    </testcase>
    <testcase classname="Component: &lt;ErrorBanner /&gt; should render ErrorBanner with subtitle" name="Component: &lt;ErrorBanner /&gt; should render ErrorBanner with subtitle" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/showcases/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:42" time="1.493" tests="6">
    <testcase classname="use-cases/showcases/slices Showcases actions fetchRequest() should update state showcases request with query params in the payload" name="use-cases/showcases/slices Showcases actions fetchRequest() should update state showcases request with query params in the payload" time="0.002">
    </testcase>
    <testcase classname="use-cases/showcases/slices Showcases actions fetchSuccess() should update state with showcases success payload" name="use-cases/showcases/slices Showcases actions fetchSuccess() should update state with showcases success payload" time="0.002">
    </testcase>
    <testcase classname="use-cases/showcases/slices Showcases actions fetchFailure() should update state with showcases failure payload" name="use-cases/showcases/slices Showcases actions fetchFailure() should update state with showcases failure payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/showcases/slices Available Showcases actions should fetch request available showcases" name="use-cases/showcases/slices Available Showcases actions should fetch request available showcases" time="0">
    </testcase>
    <testcase classname="use-cases/showcases/slices Available Showcases actions should fetch failure available showcases" name="use-cases/showcases/slices Available Showcases actions should fetch failure available showcases" time="0.001">
    </testcase>
    <testcase classname="use-cases/showcases/slices Available Showcases actions should fetch success available showcases" name="use-cases/showcases/slices Available Showcases actions should fetch success available showcases" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/requests" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:42" time="1.473" tests="4">
    <testcase classname="core/utilities/requests parseErrorObject() should get default output if input is not PlainObject" name="core/utilities/requests parseErrorObject() should get default output if input is not PlainObject" time="0.003">
    </testcase>
    <testcase classname="core/utilities/requests parseErrorObject() should get the first message and detail when there are errors" name="core/utilities/requests parseErrorObject() should get the first message and detail when there are errors" time="0.001">
    </testcase>
    <testcase classname="core/utilities/requests parseErrorObject() should return an error description when available" name="core/utilities/requests parseErrorObject() should return an error description when available" time="0.001">
    </testcase>
    <testcase classname="core/utilities/requests parseErrorObject() should throw an error in console" name="core/utilities/requests parseErrorObject() should throw an error in console" time="0">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/combo/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:43" time="1.475" tests="5">
    <testcase classname="use-cases/combo/slices Combo actions fetchRequest() should update state with product request with combo payload" name="use-cases/combo/slices Combo actions fetchRequest() should update state with product request with combo payload" time="0.004">
    </testcase>
    <testcase classname="use-cases/combo/slices Combo actions fetchSuccess() should update state with product success with combo payload" name="use-cases/combo/slices Combo actions fetchSuccess() should update state with product success with combo payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/combo/slices Combo actions fetchFailure() should update state with product failure with combo payload" name="use-cases/combo/slices Combo actions fetchFailure() should update state with product failure with combo payload" time="0.011">
    </testcase>
    <testcase classname="use-cases/combo/slices Combo actions comboUpdate() should update state with new combo quantity" name="use-cases/combo/slices Combo actions comboUpdate() should update state with new combo quantity" time="0.001">
    </testcase>
    <testcase classname="use-cases/combo/slices Combo actions comboItemUpdate() should update state with new item combo quantity" name="use-cases/combo/slices Combo actions comboItemUpdate() should update state with new item combo quantity" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="add-page-action helper" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:43" time="1.555" tests="2">
    <testcase classname="add-page-action helper should call addPageAction to extended captation with data" name="add-page-action helper should call addPageAction to extended captation with data" time="0.001">
    </testcase>
    <testcase classname="add-page-action helper should call addPageAction to extended captation without data" name="add-page-action helper should call addPageAction to extended captation without data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="core/use-cases/user/hooks" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:44" time="1.324" tests="6">
    <testcase classname="core/use-cases/user/hooks useUser() should to extract data initial from the store state, for user context" name="core/use-cases/user/hooks useUser() should to extract data initial from the store state, for user context" time="0.025">
    </testcase>
    <testcase classname="core/use-cases/user/hooks useUser() should to extract data from the store state updated after fetching user" name="core/use-cases/user/hooks useUser() should to extract data from the store state updated after fetching user" time="0.003">
    </testcase>
    <testcase classname="core/use-cases/user/hooks useUserCredit() should to extract data initial from the store state, for user credit context" name="core/use-cases/user/hooks useUserCredit() should to extract data initial from the store state, for user credit context" time="0.003">
    </testcase>
    <testcase classname="core/use-cases/user/hooks useUserCredit() should to extract data from the store state updated after fetching user credit" name="core/use-cases/user/hooks useUserCredit() should to extract data from the store state updated after fetching user credit" time="0.002">
    </testcase>
    <testcase classname="core/use-cases/user/hooks useIsBuyIntention() should to return if product contains in BuyIntention items" name="core/use-cases/user/hooks useIsBuyIntention() should to return if product contains in BuyIntention items" time="0.002">
    </testcase>
    <testcase classname="core/use-cases/user/hooks useUserBuyIntention() should to return BuyIntention items" name="core/use-cases/user/hooks useUserBuyIntention() should to return BuyIntention items" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/checkout/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:44" time="1.453" tests="23">
    <testcase classname="use-cases/checkout/slices Checkout actions cleanUp() should clean up checkout to it`s initial state" name="use-cases/checkout/slices Checkout actions cleanUp() should clean up checkout to it`s initial state" time="0.002">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions setReady() should update checkout state for true when cart reached minimum value" name="use-cases/checkout/slices Checkout actions setReady() should update checkout state for true when cart reached minimum value" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions setReady() should update checkout state for false when cart not reached minimum value" name="use-cases/checkout/slices Checkout actions setReady() should update checkout state for false when cart not reached minimum value" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions setStep() should update the checkout status according to the step `payment`" name="use-cases/checkout/slices Checkout actions setStep() should update the checkout status according to the step `payment`" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions setStep() should update the checkout status according to the step `summary`" name="use-cases/checkout/slices Checkout actions setStep() should update the checkout status according to the step `summary`" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions paymentMethodsFetchRequest() should update the state checkout when request payment methods" name="use-cases/checkout/slices Checkout actions paymentMethodsFetchRequest() should update the state checkout when request payment methods" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions paymentMethodsFetchSuccess() should update the state checkout when success payment methods" name="use-cases/checkout/slices Checkout actions paymentMethodsFetchSuccess() should update the state checkout when success payment methods" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions paymentMethodsFetchFailure() should update the state checkout when failure payment methods" name="use-cases/checkout/slices Checkout actions paymentMethodsFetchFailure() should update the state checkout when failure payment methods" time="0">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions paymentDetailFetchRequest() should update the state checkout when request for select the payment detail" name="use-cases/checkout/slices Checkout actions paymentDetailFetchRequest() should update the state checkout when request for select the payment detail" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions paymentDetailFetchFailure() should update the state checkout when selected failure payment detail" name="use-cases/checkout/slices Checkout actions paymentDetailFetchFailure() should update the state checkout when selected failure payment detail" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions createOrderFetchRequest() should update the state checkout when request for create order" name="use-cases/checkout/slices Checkout actions createOrderFetchRequest() should update the state checkout when request for create order" time="0">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions createOrderFetchSuccess() should update the state checkout when success create order" name="use-cases/checkout/slices Checkout actions createOrderFetchSuccess() should update the state checkout when success create order" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions createOrderFetchFailure() should update the state checkout when failure create order" name="use-cases/checkout/slices Checkout actions createOrderFetchFailure() should update the state checkout when failure create order" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions setBankSlipOption() should select a payment option and update a store" name="use-cases/checkout/slices Checkout actions setBankSlipOption() should select a payment option and update a store" time="0.002">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions setPayWithdrawalsOption() should select a withdrawals payment option and update a store" name="use-cases/checkout/slices Checkout actions setPayWithdrawalsOption() should select a withdrawals payment option and update a store" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions setCentralPaymentOption() should select a central payment option and update a store" name="use-cases/checkout/slices Checkout actions setCentralPaymentOption() should select a central payment option and update a store" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions setPaymentMethodStatus() should set payment method status to idle" name="use-cases/checkout/slices Checkout actions setPaymentMethodStatus() should set payment method status to idle" time="0">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions orderFetchFailure() should reset value of isRetry to false" name="use-cases/checkout/slices Checkout actions orderFetchFailure() should reset value of isRetry to false" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions Gifts actions should set clear selected gifts" name="use-cases/checkout/slices Checkout actions Gifts actions should set clear selected gifts" time="0">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions Gifts actions should add selected gift from first promotion" name="use-cases/checkout/slices Checkout actions Gifts actions should add selected gift from first promotion" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions Gifts actions should remove selected gift from first promotion" name="use-cases/checkout/slices Checkout actions Gifts actions should remove selected gift from first promotion" time="0.001">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions Gifts actions should overwrite quantity to above the max available and set available instead from selected gift from first promotion" name="use-cases/checkout/slices Checkout actions Gifts actions should overwrite quantity to above the max available and set available instead from selected gift from first promotion" time="0">
    </testcase>
    <testcase classname="use-cases/checkout/slices Checkout actions Gifts actions should post selected promotions" name="use-cases/checkout/slices Checkout actions Gifts actions should post selected promotions" time="0">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/settings/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:45" time="1.153" tests="1">
    <testcase classname="use-cases/settings/slices Settings actions fetchRequest() should update state with settings options request payload" name="use-cases/settings/slices Settings actions fetchRequest() should update state with settings options request payload" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/flux" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:45" time="1.122" tests="3">
    <testcase classname="core/utilities/flux createReducer() should return a reducer function" name="core/utilities/flux createReducer() should return a reducer function" time="0.003">
    </testcase>
    <testcase classname="core/utilities/flux createReducer() should return properly using the default state" name="core/utilities/flux createReducer() should return properly using the default state" time="0.001">
    </testcase>
    <testcase classname="core/utilities/flux createReducer() should return properly using a custom state" name="core/utilities/flux createReducer() should return properly using a custom state" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Button /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:45" time="1.286" tests="4">
    <testcase classname="Component: &lt;Button /&gt; Variants should render ButtonSolid properly" name="Component: &lt;Button /&gt; Variants should render ButtonSolid properly" time="0.075">
    </testcase>
    <testcase classname="Component: &lt;Button /&gt; Variants should render ButtonGhost properly" name="Component: &lt;Button /&gt; Variants should render ButtonGhost properly" time="0.018">
    </testcase>
    <testcase classname="Component: &lt;Button /&gt; Variants should render ButtonAlt properly" name="Component: &lt;Button /&gt; Variants should render ButtonAlt properly" time="0.03">
    </testcase>
    <testcase classname="Component: &lt;Button /&gt; Variants should render ButtonIcon properly" name="Component: &lt;Button /&gt; Variants should render ButtonIcon properly" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;UnavailableButton /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:45" time="1.435" tests="3">
    <testcase classname="&lt;UnavailableButton /&gt; should render button not disabled when user is not IR" name="&lt;UnavailableButton /&gt; should render button not disabled when user is not IR" time="0.086">
    </testcase>
    <testcase classname="&lt;UnavailableButton /&gt; should render button disabled when user is IR and is not auto start enabled" name="&lt;UnavailableButton /&gt; should render button disabled when user is IR and is not auto start enabled" time="0.006">
    </testcase>
    <testcase classname="&lt;UnavailableButton /&gt; should render button not disabled when user is IR and is auto start enabled" name="&lt;UnavailableButton /&gt; should render button not disabled when user is IR and is auto start enabled" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Relic Monitoring" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:46" time="1.585" tests="2">
    <testcase classname="Relic Monitoring noticeError should run when NREUM exists and call the function &quot;noticeError&quot;" name="Relic Monitoring noticeError should run when NREUM exists and call the function &quot;noticeError&quot;" time="0.024">
    </testcase>
    <testcase classname="Relic Monitoring noticeError should run when NREUM with one parameter exists and call the function &quot;noticeErrorFn&quot;" name="Relic Monitoring noticeError should run when NREUM with one parameter exists and call the function &quot;noticeErrorFn&quot;" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/uuid" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:46" time="1.491" tests="1">
    <testcase classname="core/utilities/uuid uuid createUniqueID() should return unique ID" name="core/utilities/uuid uuid createUniqueID() should return unique ID" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:47" time="1.581" tests="2">
    <testcase classname="core/utilities/strings removeTags() should remove all tags from an html string" name="core/utilities/strings removeTags() should remove all tags from an html string" time="0.002">
    </testcase>
    <testcase classname="core/utilities/strings removeTags() should return an empty string when input is default" name="core/utilities/strings removeTags() should return an empty string when input is default" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/order/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:47" time="1.619" tests="4">
    <testcase classname="use-cases/order/slices Order actions cleanUp() should clean up order to it`s initial state" name="use-cases/order/slices Order actions cleanUp() should clean up order to it`s initial state" time="0.006">
    </testcase>
    <testcase classname="use-cases/order/slices Order actions fetchRequest() should update the state order when request" name="use-cases/order/slices Order actions fetchRequest() should update the state order when request" time="0.002">
    </testcase>
    <testcase classname="use-cases/order/slices Order actions fetchSuccess() should update the state order when success" name="use-cases/order/slices Order actions fetchSuccess() should update the state order when success" time="0.001">
    </testcase>
    <testcase classname="use-cases/order/slices Order actions fetchFailure() should update the state order when failure" name="use-cases/order/slices Order actions fetchFailure() should update the state order when failure" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/helpers" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:48" time="1.306" tests="2">
    <testcase classname="core/utilities/helpers getReturnUrl() should return fallback url when no url is provided" name="core/utilities/helpers getReturnUrl() should return fallback url when no url is provided" time="0.001">
    </testcase>
    <testcase classname="core/utilities/helpers getReturnUrl() should return an empty string when window.location.search is provided" name="core/utilities/helpers getReturnUrl() should return an empty string when window.location.search is provided" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/middlewares/utilities" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:48" time="1.32" tests="2">
    <testcase classname="core/middlewares/utilities getAsyncActions() should throw when is not a valid request action type" name="core/middlewares/utilities getAsyncActions() should throw when is not a valid request action type" time="0.007">
    </testcase>
    <testcase classname="core/middlewares/utilities getAsyncActions() should return action type object with key success and failure" name="core/middlewares/utilities getAsyncActions() should return action type object with key success and failure" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/search/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:49" time="1.38" tests="4">
    <testcase classname="use-cases/search/slices Search actions fetchRequest() should not update state search if not has query params in the payload" name="use-cases/search/slices Search actions fetchRequest() should not update state search if not has query params in the payload" time="0.002">
    </testcase>
    <testcase classname="use-cases/search/slices Search actions fetchRequest() should update state with search request with query params in the payload" name="use-cases/search/slices Search actions fetchRequest() should update state with search request with query params in the payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/search/slices Search actions fetchSuccess() should update state with search success payload" name="use-cases/search/slices Search actions fetchSuccess() should update state with search success payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/search/slices Search actions fetchFailure() should update state with search failure payload" name="use-cases/search/slices Search actions fetchFailure() should update state with search failure payload" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Radio /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:49" time="1.448" tests="1">
    <testcase classname="Component: &lt;Radio /&gt; should render &lt;Radio /&gt; component with a label" name="Component: &lt;Radio /&gt; should render &lt;Radio /&gt; component with a label" time="0.04">
    </testcase>
  </testsuite>
  <testsuite name="getPaymentView()" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:49" time="1.32" tests="3">
    <testcase classname="getPaymentView() return generic view when receiving no payment data" name="getPaymentView() return generic view when receiving no payment data" time="0.003">
    </testcase>
    <testcase classname="getPaymentView() return boleto view when payment payload has one installment only" name="getPaymentView() return boleto view when payment payload has one installment only" time="0">
    </testcase>
    <testcase classname="getPaymentView() return boleto installments view when payment payload has more than one installment" name="getPaymentView() return boleto installments view when payment payload has more than one installment" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="use-cases/user/slices" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:49" time="1.464" tests="17">
    <testcase classname="use-cases/user/slices User actions cyclesRequest() should update state with cycles" name="use-cases/user/slices User actions cyclesRequest() should update state with cycles" time="0.002">
    </testcase>
    <testcase classname="use-cases/user/slices User actions cyclesRequestFailure() should update state with cycles fetch failure payload" name="use-cases/user/slices User actions cyclesRequestFailure() should update state with cycles fetch failure payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/user/slices User actions creditFetchRequest() should update state with credit fetch request payload" name="use-cases/user/slices User actions creditFetchRequest() should update state with credit fetch request payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/user/slices User actions creditFetchSuccess() should update state with credit fetch success payload" name="use-cases/user/slices User actions creditFetchSuccess() should update state with credit fetch success payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/user/slices User actions creditFetchFailure() should update state with credit fetch failure payload" name="use-cases/user/slices User actions creditFetchFailure() should update state with credit fetch failure payload" time="0">
    </testcase>
    <testcase classname="use-cases/user/slices User actions userFetchRequest() should update state with user fetch request payload" name="use-cases/user/slices User actions userFetchRequest() should update state with user fetch request payload" time="0.007">
    </testcase>
    <testcase classname="use-cases/user/slices User actions userFetchSuccess() should update state with user fetch success payload" name="use-cases/user/slices User actions userFetchSuccess() should update state with user fetch success payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/user/slices User actions fetchFailure() should update state with when cart failure payload" name="use-cases/user/slices User actions fetchFailure() should update state with when cart failure payload" time="0">
    </testcase>
    <testcase classname="use-cases/user/slices User actions changeCycle() should update state with change cycle payload" name="use-cases/user/slices User actions changeCycle() should update state with change cycle payload" time="0">
    </testcase>
    <testcase classname="use-cases/user/slices User actions changeCycleSuccess() should update state with change cycle success payload" name="use-cases/user/slices User actions changeCycleSuccess() should update state with change cycle success payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/user/slices User actions changeCycleError() should update state with change cycle error payload" name="use-cases/user/slices User actions changeCycleError() should update state with change cycle error payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/user/slices User actions goToExtendedCycleSuccess() should update state with go to extended cycle success" name="use-cases/user/slices User actions goToExtendedCycleSuccess() should update state with go to extended cycle success" time="0">
    </testcase>
    <testcase classname="use-cases/user/slices User actions updateCycle() should update state with next cycle" name="use-cases/user/slices User actions updateCycle() should update state with next cycle" time="0.002">
    </testcase>
    <testcase classname="use-cases/user/slices User actions userBuyIntentionFetch() should update state with user buy intention fetch request payload" name="use-cases/user/slices User actions userBuyIntentionFetch() should update state with user buy intention fetch request payload" time="0">
    </testcase>
    <testcase classname="use-cases/user/slices User actions userBuyIntentionFetchSuccess() should update state with user buy intention fetch success payload" name="use-cases/user/slices User actions userBuyIntentionFetchSuccess() should update state with user buy intention fetch success payload" time="0.001">
    </testcase>
    <testcase classname="use-cases/user/slices User actions userBuyIntentionFetchFailure() should update state with user buy intention fetch success payload" name="use-cases/user/slices User actions userBuyIntentionFetchFailure() should update state with user buy intention fetch success payload" time="0">
    </testcase>
    <testcase classname="use-cases/user/slices User actions itemAddFetchFailure should update the state of a list of items when a request to add a cart item takes place an error" name="use-cases/user/slices User actions itemAddFetchFailure should update the state of a list of items when a request to add a cart item takes place an error" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/requests" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:50" time="1.327" tests="1">
    <testcase classname="core/utilities/requests parseStatus() should return default fallback when status is unknown" name="core/utilities/requests parseStatus() should return default fallback when status is unknown" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Text /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:50" time="1.44" tests="7">
    <testcase classname="Component: &lt;Text /&gt; Variants should render Text properly" name="Component: &lt;Text /&gt; Variants should render Text properly" time="0.028">
    </testcase>
    <testcase classname="Component: &lt;Text /&gt; Variants should render Text whith body-large-standard prop properly" name="Component: &lt;Text /&gt; Variants should render Text whith body-large-standard prop properly" time="0.008">
    </testcase>
    <testcase classname="Component: &lt;Text /&gt; Variants should render Text whith body-large-short prop properly" name="Component: &lt;Text /&gt; Variants should render Text whith body-large-short prop properly" time="0.004">
    </testcase>
    <testcase classname="Component: &lt;Text /&gt; Variants should render Text whith body-medium-standard prop properly" name="Component: &lt;Text /&gt; Variants should render Text whith body-medium-standard prop properly" time="0.004">
    </testcase>
    <testcase classname="Component: &lt;Text /&gt; Variants should render Text whith body-medium-short prop properly" name="Component: &lt;Text /&gt; Variants should render Text whith body-medium-short prop properly" time="0.004">
    </testcase>
    <testcase classname="Component: &lt;Text /&gt; Variants should render Text whith auxiliar-small prop properly" name="Component: &lt;Text /&gt; Variants should render Text whith auxiliar-small prop properly" time="0.004">
    </testcase>
    <testcase classname="Component: &lt;Text /&gt; Variants should render Text whith auxiliar-mini prop properly" name="Component: &lt;Text /&gt; Variants should render Text whith auxiliar-mini prop properly" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="itemTrackData" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:50" time="1.276" tests="1">
    <testcase classname="itemTrackData should generate the correct item track data" name="itemTrackData should generate the correct item track data" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="core/use-cases/catalog/hooks" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:51" time="1.254" tests="1">
    <testcase classname="core/use-cases/catalog/hooks useCatalog() should update quantity of catalog items" name="core/use-cases/catalog/hooks useCatalog() should update quantity of catalog items" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/location" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:52" time="1.206" tests="2">
    <testcase classname="core/utilities/location getBasePathname() should return a pathname with prefix when there is a prefix" name="core/utilities/location getBasePathname() should return a pathname with prefix when there is a prefix" time="0.001">
    </testcase>
    <testcase classname="core/utilities/location getBasePathname() should return a pathname with prefix when there is no prefix" name="core/utilities/location getBasePathname() should return a pathname with prefix when there is no prefix" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Insert Seo Meta Tags" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:52" time="1.167" tests="1">
    <testcase classname="Insert Seo Meta Tags should not create script element when called without clientId" name="Insert Seo Meta Tags should not create script element when called without clientId" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Input /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:52" time="1.132" tests="1">
    <testcase classname="Component: &lt;Input /&gt; should render input properly" name="Component: &lt;Input /&gt; should render input properly" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="Relic Monitoring" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:52" time="1.134" tests="3">
    <testcase classname="Relic Monitoring noticeError should run when NREUM exists and call the function &quot;noticeError&quot;" name="Relic Monitoring noticeError should run when NREUM exists and call the function &quot;noticeError&quot;" time="0.001">
    </testcase>
    <testcase classname="Relic Monitoring noticeError should run when NREUM with one parameter exists and call the function &quot;noticeErrorFn&quot;" name="Relic Monitoring noticeError should run when NREUM with one parameter exists and call the function &quot;noticeErrorFn&quot;" time="0">
    </testcase>
    <testcase classname="Relic Monitoring setApplicationVersion should run when NREUM exists and call the function &quot;setApplicationVersion&quot;" name="Relic Monitoring setApplicationVersion should run when NREUM exists and call the function &quot;setApplicationVersion&quot;" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getPathname" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:53" time="1.916" tests="3">
    <testcase classname="getPathname should return string when called with string" name="getPathname should return string when called with string" time="0.002">
    </testcase>
    <testcase classname="getPathname should return string when called with Location object" name="getPathname should return string when called with Location object" time="0">
    </testcase>
    <testcase classname="getPathname should return empty string when called with no data" name="getPathname should return empty string when called with no data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Lib Helpers" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:53" time="2.097" tests="5">
    <testcase classname="Lib Helpers createRootCSSVariables() should create the root css custom properties" name="Lib Helpers createRootCSSVariables() should create the root css custom properties" time="0.002">
    </testcase>
    <testcase classname="Lib Helpers createRootCSSVariables() should match snapshot of root css variables" name="Lib Helpers createRootCSSVariables() should match snapshot of root css variables" time="0.003">
    </testcase>
    <testcase classname="Lib Helpers createCSSTokensObject() should create the design tokens object" name="Lib Helpers createCSSTokensObject() should create the design tokens object" time="0.001">
    </testcase>
    <testcase classname="Lib Helpers createCSSTokensObject() should match snapshot of design tokens object" name="Lib Helpers createCSSTokensObject() should match snapshot of design tokens object" time="0.009">
    </testcase>
    <testcase classname="Lib Helpers extractKeysRegex() should return the first key and second key of a given property" name="Lib Helpers extractKeysRegex() should return the first key and second key of a given property" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Heading /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:53" time="2.061" tests="6">
    <testcase classname="Component: &lt;Heading /&gt; Variants should render a H1 properly" name="Component: &lt;Heading /&gt; Variants should render a H1 properly" time="0.038">
    </testcase>
    <testcase classname="Component: &lt;Heading /&gt; Variants should render a H2 properly" name="Component: &lt;Heading /&gt; Variants should render a H2 properly" time="0.012">
    </testcase>
    <testcase classname="Component: &lt;Heading /&gt; Variants should render a H3 properly" name="Component: &lt;Heading /&gt; Variants should render a H3 properly" time="0.003">
    </testcase>
    <testcase classname="Component: &lt;Heading /&gt; Variants should render a H4 properly" name="Component: &lt;Heading /&gt; Variants should render a H4 properly" time="0.01">
    </testcase>
    <testcase classname="Component: &lt;Heading /&gt; Variants should render a H5 properly" name="Component: &lt;Heading /&gt; Variants should render a H5 properly" time="0.009">
    </testcase>
    <testcase classname="Component: &lt;Heading /&gt; Variants should render a H6 properly" name="Component: &lt;Heading /&gt; Variants should render a H6 properly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Tag /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:53" time="2.385" tests="1">
    <testcase classname="Component: &lt;Tag /&gt; should render Tag properly" name="Component: &lt;Tag /&gt; should render Tag properly" time="0.054">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/dom" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:56" time="2.561" tests="8">
    <testcase classname="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 1920px" name="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 1920px" time="0.001">
    </testcase>
    <testcase classname="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 1280px" name="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 1280px" time="0.004">
    </testcase>
    <testcase classname="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 1024px" name="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 1024px" time="0">
    </testcase>
    <testcase classname="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 880px" name="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 880px" time="0">
    </testcase>
    <testcase classname="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 768px" name="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 768px" time="0.001">
    </testcase>
    <testcase classname="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 480px" name="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 480px" time="0">
    </testcase>
    <testcase classname="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 400px" name="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 400px" time="0">
    </testcase>
    <testcase classname="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 360px" name="core/utilities/dom getScreenSize() should get the screen size breakpoint when window width is bigger than 360px" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:56" time="2.596" tests="2">
    <testcase classname="core/utilities/strings removeEmptyTags() should remove empty tags from an html string" name="core/utilities/strings removeEmptyTags() should remove empty tags from an html string" time="0.002">
    </testcase>
    <testcase classname="core/utilities/strings removeEmptyTags() should return an empty string when no input is provided" name="core/utilities/strings removeEmptyTags() should return an empty string when no input is provided" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useRouter" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:56" time="2.575" tests="4">
    <testcase classname="useRouter useRouterLocation() should extract router location" name="useRouter useRouterLocation() should extract router location" time="0.015">
    </testcase>
    <testcase classname="useRouter useRouterState() should extract location state" name="useRouter useRouterState() should extract location state" time="0.005">
    </testcase>
    <testcase classname="useRouter useRouterState() should remove category from the dynamic title when user remove selection" name="useRouter useRouterState() should remove category from the dynamic title when user remove selection" time="0.005">
    </testcase>
    <testcase classname="useRouter helpers formatQueryTitle() should not show the dynamic title when state is undefined" name="useRouter helpers formatQueryTitle() should not show the dynamic title when state is undefined" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/use-cases/search/hooks" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:56" time="2.326" tests="2">
    <testcase classname="core/use-cases/search/hooks useSearch() should extract data initial from the store state, for search context" name="core/use-cases/search/hooks useSearch() should extract data initial from the store state, for search context" time="0.025">
    </testcase>
    <testcase classname="core/use-cases/search/hooks useSearch() should extract data from the store state updated after fetching search" name="core/use-cases/search/hooks useSearch() should extract data from the store state updated after fetching search" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Logo /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:58" time="1.154" tests="4">
    <testcase classname="Component: &lt;Logo /&gt; should render Logo with default properties" name="Component: &lt;Logo /&gt; should render Logo with default properties" time="0.031">
    </testcase>
    <testcase classname="Component: &lt;Logo /&gt; should render Logo with secondary color" name="Component: &lt;Logo /&gt; should render Logo with secondary color" time="0.005">
    </testcase>
    <testcase classname="Component: &lt;Logo /&gt; should render Logo with tertiary color" name="Component: &lt;Logo /&gt; should render Logo with tertiary color" time="0.004">
    </testcase>
    <testcase classname="Component: &lt;Logo /&gt; should render Logo short properly" name="Component: &lt;Logo /&gt; should render Logo short properly" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="core/middlewares/effects/bff/helpers" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:58" time="1.132" tests="1">
    <testcase classname="core/middlewares/effects/bff/helpers resourceResolver() should throw when is not a valid request action type" name="core/middlewares/effects/bff/helpers resourceResolver() should throw when is not a valid request action type" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="getRequestURL" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:58" time="1.159" tests="3">
    <testcase classname="getRequestURL should return url when called with a string endpoint with slash" name="getRequestURL should return url when called with a string endpoint with slash" time="0.003">
    </testcase>
    <testcase classname="getRequestURL should return url when called with a string endpoint without slash" name="getRequestURL should return url when called with a string endpoint without slash" time="0">
    </testcase>
    <testcase classname="getRequestURL should return url when called with a function endpoint and options" name="getRequestURL should return url when called with a function endpoint and options" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:26:59" time="1.306" tests="4">
    <testcase classname="core/utilities/strings pad() pad(5, 2) should be &apos;05&apos;" name="core/utilities/strings pad() pad(5, 2) should be &apos;05&apos;" time="0.001">
    </testcase>
    <testcase classname="core/utilities/strings pad() pad(7, 3) should be &apos;007&apos;" name="core/utilities/strings pad() pad(7, 3) should be &apos;007&apos;" time="0">
    </testcase>
    <testcase classname="core/utilities/strings pad() pad(1, 5) should be &apos;00001&apos;" name="core/utilities/strings pad() pad(1, 5) should be &apos;00001&apos;" time="0.001">
    </testcase>
    <testcase classname="core/utilities/strings pad() should complete a number with one zero when no length is provided" name="core/utilities/strings pad() should complete a number with one zero when no length is provided" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/helpers" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:27:00" time="1.259" tests="2">
    <testcase classname="core/utilities/helpers clearNumber() should clean up a string leaving only numbers" name="core/utilities/helpers clearNumber() should clean up a string leaving only numbers" time="0.001">
    </testcase>
    <testcase classname="core/utilities/helpers clearNumber() should return an empty string when no input is provided" name="core/utilities/helpers clearNumber() should return an empty string when no input is provided" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:27:00" time="1.232" tests="2">
    <testcase classname="core/utilities/strings removeWhitespace() should remove extra whitespace from string" name="core/utilities/strings removeWhitespace() should remove extra whitespace from string" time="0.002">
    </testcase>
    <testcase classname="core/utilities/strings removeWhitespace() should return an empty string when input is default" name="core/utilities/strings removeWhitespace() should return an empty string when input is default" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="core/middlewares/effects/bff/helpers" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:27:00" time="1.277" tests="3">
    <testcase classname="core/middlewares/effects/bff/helpers getResource() should throw when is not a valid action type" name="core/middlewares/effects/bff/helpers getResource() should throw when is not a valid action type" time="0.016">
    </testcase>
    <testcase classname="core/middlewares/effects/bff/helpers getResource() should return vdf cycle endpoint" name="core/middlewares/effects/bff/helpers getResource() should return vdf cycle endpoint" time="0.001">
    </testcase>
    <testcase classname="core/middlewares/effects/bff/helpers getResource() should return change cycle endpoint" name="core/middlewares/effects/bff/helpers getResource() should return change cycle endpoint" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="core/use-cases/showcases/selectors" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:27:00" time="1.624" tests="2">
    <testcase classname="core/use-cases/showcases/selectors useShowcasesAvailableSelector() Should return available showcases data" name="core/use-cases/showcases/selectors useShowcasesAvailableSelector() Should return available showcases data" time="0.012">
    </testcase>
    <testcase classname="core/use-cases/showcases/selectors useShowcasesSelector() Should return formatted showcases data" name="core/use-cases/showcases/selectors useShowcasesSelector() Should return formatted showcases data" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="resetProducts" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:27:01" time="1.148" tests="4">
    <testcase classname="resetProducts should reset showcases for home view with available showcases" name="resetProducts should reset showcases for home view with available showcases" time="0.002">
    </testcase>
    <testcase classname="resetProducts should reset products for department view" name="resetProducts should reset products for department view" time="0.001">
    </testcase>
    <testcase classname="resetProducts should reset products for tag search" name="resetProducts should reset products for tag search" time="0">
    </testcase>
    <testcase classname="resetProducts should reset products for product search" name="resetProducts should reset products for product search" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Endpoints Mapper" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:27:01" time="1.153" tests="26">
    <testcase classname="Endpoints Mapper cartItemUpdate enpoint" name="Endpoints Mapper cartItemUpdate enpoint" time="0.003">
    </testcase>
    <testcase classname="Endpoints Mapper cartSetCoupon enpoint" name="Endpoints Mapper cartSetCoupon enpoint" time="0.001">
    </testcase>
    <testcase classname="Endpoints Mapper campaignGet enpoint" name="Endpoints Mapper campaignGet enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper campaignItemUpdate enpoint" name="Endpoints Mapper campaignItemUpdate enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper comboGet enpoint" name="Endpoints Mapper comboGet enpoint" time="0.001">
    </testcase>
    <testcase classname="Endpoints Mapper comboPost enpoint" name="Endpoints Mapper comboPost enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper paymentMethodsGet enpoint" name="Endpoints Mapper paymentMethodsGet enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper paymentDetailsSet enpoint" name="Endpoints Mapper paymentDetailsSet enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper orderCreate enpoint" name="Endpoints Mapper orderCreate enpoint" time="0.001">
    </testcase>
    <testcase classname="Endpoints Mapper orderGet enpoint" name="Endpoints Mapper orderGet enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper userBuyIntention enpoint" name="Endpoints Mapper userBuyIntention enpoint" time="0.001">
    </testcase>
    <testcase classname="Endpoints Mapper processGet enpoint" name="Endpoints Mapper processGet enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper promotionFetch enpoint" name="Endpoints Mapper promotionFetch enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true cartItemUpdate enpoint" name="Endpoints Mapper isHybridCart = true cartItemUpdate enpoint" time="0.001">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true cartSetCoupon enpoint" name="Endpoints Mapper isHybridCart = true cartSetCoupon enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true campaignGet enpoint" name="Endpoints Mapper isHybridCart = true campaignGet enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true campaignItemUpdate enpoint" name="Endpoints Mapper isHybridCart = true campaignItemUpdate enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true comboGet enpoint" name="Endpoints Mapper isHybridCart = true comboGet enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true comboPost enpoint" name="Endpoints Mapper isHybridCart = true comboPost enpoint" time="0.001">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true paymentMethodsGet enpoint" name="Endpoints Mapper isHybridCart = true paymentMethodsGet enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true paymentDetailsSet enpoint" name="Endpoints Mapper isHybridCart = true paymentDetailsSet enpoint" time="0.003">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true orderCreate enpoint" name="Endpoints Mapper isHybridCart = true orderCreate enpoint" time="0.001">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true orderGet enpoint" name="Endpoints Mapper isHybridCart = true orderGet enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true userBuyIntention enpoint" name="Endpoints Mapper isHybridCart = true userBuyIntention enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true processGet enpoint" name="Endpoints Mapper isHybridCart = true processGet enpoint" time="0">
    </testcase>
    <testcase classname="Endpoints Mapper isHybridCart = true promotionFetch enpoint" name="Endpoints Mapper isHybridCart = true promotionFetch enpoint" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/helpers" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:27:01" time="1.117" tests="4">
    <testcase classname="core/utilities/helpers presenterStatus() should return presenter status when RUNNING" name="core/utilities/helpers presenterStatus() should return presenter status when RUNNING" time="0.002">
    </testcase>
    <testcase classname="core/utilities/helpers presenterStatus() should return presenter status when ERROR" name="core/utilities/helpers presenterStatus() should return presenter status when ERROR" time="0">
    </testcase>
    <testcase classname="core/utilities/helpers presenterStatus() should return presenter status when SUCCESS" name="core/utilities/helpers presenterStatus() should return presenter status when SUCCESS" time="0.001">
    </testcase>
    <testcase classname="core/utilities/helpers presenterStatus() should return presenter status when IDLE" name="core/utilities/helpers presenterStatus() should return presenter status when IDLE" time="0">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:27:02" time="1.189" tests="1">
    <testcase classname="core/utilities/strings cleanupHTML() should return a clean string" name="core/utilities/strings cleanupHTML() should return a clean string" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/strings" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:27:02" time="0.999" tests="2">
    <testcase classname="core/utilities/strings keysToCamelCase() should return an object empty" name="core/utilities/strings keysToCamelCase() should return an object empty" time="0.002">
    </testcase>
    <testcase classname="core/utilities/strings keysToCamelCase() should return an object with keys in camelCase" name="core/utilities/strings keysToCamelCase() should return an object with keys in camelCase" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="core/utilities/auth" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:27:02" time="1.015" tests="4">
    <testcase classname="core/utilities/auth getAccessToken() should return an empty string when there is no url hash" name="core/utilities/auth getAccessToken() should return an empty string when there is no url hash" time="0.002">
    </testcase>
    <testcase classname="core/utilities/auth getAccessToken() should return token from url hash" name="core/utilities/auth getAccessToken() should return token from url hash" time="0">
    </testcase>
    <testcase classname="core/utilities/auth hasAccessToken() should return false if has no url hash" name="core/utilities/auth hasAccessToken() should return false if has no url hash" time="0.001">
    </testcase>
    <testcase classname="core/utilities/auth hasAccessToken() should return true if has an url hash" name="core/utilities/auth hasAccessToken() should return true if has an url hash" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Component: &lt;Image /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-05-27T22:27:02" time="0.932" tests="5">
    <testcase classname="Component: &lt;Image /&gt; &lt;Image /&gt; should render &lt;Image /&gt; component properly" name="Component: &lt;Image /&gt; &lt;Image /&gt; should render &lt;Image /&gt; component properly" time="0.025">
    </testcase>
    <testcase classname="Component: &lt;Image /&gt; &lt;Figure /&gt; should render &lt;Figure /&gt; component properly without caption" name="Component: &lt;Image /&gt; &lt;Figure /&gt; should render &lt;Figure /&gt; component properly without caption" time="0.006">
    </testcase>
    <testcase classname="Component: &lt;Image /&gt; &lt;Figure /&gt; should render &lt;Figure /&gt; component properly with caption" name="Component: &lt;Image /&gt; &lt;Figure /&gt; should render &lt;Figure /&gt; component properly with caption" time="0.005">
    </testcase>
    <testcase classname="Component: &lt;Image /&gt; &lt;Picture /&gt; should render &lt;Picture /&gt; component properly" name="Component: &lt;Image /&gt; &lt;Picture /&gt; should render &lt;Picture /&gt; component properly" time="0.004">
    </testcase>
    <testcase classname="Component: &lt;Image /&gt; &lt;Picture /&gt; Should render image error" name="Component: &lt;Image /&gt; &lt;Picture /&gt; Should render image error" time="0.006">
    </testcase>
  </testsuite>
</testsuites>
